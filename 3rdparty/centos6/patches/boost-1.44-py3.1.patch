Description: Enable building with Python 3.1
 Fix a build problem where PyInt_Type is not defined.
Author: Andreas Kloeckner <inform@tiker.net>
Bug: 595786
Forwarded: https://svn.boost.org/trac/boost/ticket/4657

Boost 1.49: on trunk, not release.


--- boost1.44-1.44.0.orig/libs/mpi/src/python/datatypes.cpp
+++ boost1.44-1.44.0/libs/mpi/src/python/datatypes.cpp
@@ -17,7 +17,9 @@
 
 void export_datatypes()
 {
+#if PY_MAJOR_VERSION < 3
   register_serialized(long(0), &PyInt_Type);
+#endif
   register_serialized(false, &PyBool_Type);
   register_serialized(double(0.0), &PyFloat_Type);
 }
--- boost1.44-1.44.0.orig/libs/mpi/src/python/py_environment.cpp
+++ boost1.44-1.44.0/libs/mpi/src/python/py_environment.cpp
@@ -11,6 +11,9 @@
  *  This file reflects the Boost.MPI "environment" class into Python
  *  methods at module level.
  */
+
+#include <locale>
+#include <string>
 #include <boost/python.hpp>
 #include <boost/mpi.hpp>
 
@@ -50,11 +53,65 @@
 
   // If anything changed, convert C-style argc/argv into Python argv
   if (mpi_argv != my_argv)
+  {
+#if PY_MAJOR_VERSION >= 3
+    // Code stolen from py3k/Modules/python.c.
+
+    wchar_t **argv_copy = (wchar_t **)PyMem_Malloc(sizeof(wchar_t*)*mpi_argc);
+    /* We need a second copies, as Python might modify the first one. */
+    wchar_t **argv_copy2 = (wchar_t **)PyMem_Malloc(sizeof(wchar_t*)*mpi_argc);
+
+    if (!argv_copy || !argv_copy2) {
+      fprintf(stderr, "out of memory\n");
+      return false;
+    }
+
+    std::locale mylocale;
+    mbstate_t mystate;
+
+    const std::codecvt<char, wchar_t, mbstate_t>& myfacet =
+      std::use_facet<std::codecvt<char, wchar_t, mbstate_t> >(mylocale);
+
+    for (int i = 0; i < mpi_argc; i++) 
+    {
+      size_t length = strlen(mpi_argv[i]);
+
+      wchar_t *dest = (wchar_t *) PyMem_Malloc(sizeof(wchar_t) * (length + 1));
+
+      const char *from_next;
+      wchar_t *to_next;
+
+      std::codecvt<wchar_t,char,mbstate_t>::result myresult = 
+        myfacet.out(mystate,
+            mpi_argv[i], mpi_argv[i] + length + 1, from_next,
+            dest, dest+length+1, to_next);
+
+      if (myresult != std::codecvt<wchar_t,char,mbstate_t>::ok )
+      {
+        fprintf(stderr, "failure translating argv\n");
+        return 1;
+      }
+
+      argv_copy2[i] = argv_copy[i] = dest;
+      if (!argv_copy[i])
+          return false;
+    }
+
+    PySys_SetArgv(mpi_argc, argv_copy);
+
+    for (int i = 0; i < mpi_argc; i++) {
+        PyMem_Free(argv_copy2[i]);
+    }
+    PyMem_Free(argv_copy);
+    PyMem_Free(argv_copy2);
+#else
     PySys_SetArgv(mpi_argc, mpi_argv);
+#endif
+  }
 
-  for (int arg = 0; arg < my_argc; ++arg)
-    free(my_argv[arg]);
-  delete [] my_argv;
+  for (int arg = 0; arg < mpi_argc; ++arg)
+    free(mpi_argv[arg]);
+  delete [] mpi_argv;
 
   return true;
 }
