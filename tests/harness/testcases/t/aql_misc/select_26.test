--setup
--start-query-logging
--aql create array A <a:int32, b:string> [x=0:3,3,0,y=0:2,3,0]
--aql create array T <a:int32> [x=0:3,3,0,y=0:2,3,0]
--aql create array TS <a:string> [x=0:3,3,0,y=0:2,3,0]

--test

--igdata --aql="select * from show(A)"
--aql select * from aggregate(A,count(*))
--aql select name,schema from list('arrays')
--aql rename array A to B
--aql select name,schema from list()
--aql select * into D from dimensions(B)
--aql select * from attributes(D)
--aql select name, start, length, chunk_interval, chunk_overlap, low, high, type from dimensions(B)
--aql select * into C from attributes(B)
--aql select * from attributes(C)
--aql select name, type_id, nullable from attributes(B)
--aql select * into B from build(T,x+5),build(TS,string(x+1))
--aql select * from filter(B,x=0)
--aql select * from apply(B,z,x)
--aql select * from attributes(B)
--aql select * from dimensions(B)
--aql select name, high, low, dim.high, dim.low from dimensions(B) as dim
--aql select name, high, low, dim.high, dim.low from dimensions(B) as dim where dim.name='x'
--aql select name, start, length, chunk_interval, chunk_overlap, low, high, type from dimensions(B)
--aql select name, type_id, nullable from attributes(B)
--aql select * from aggregate(versions(B),count(*))
--aql select * into B from filter(build(T,x+2),true),filter(build(TS,string(x+20)),1)
--aql select version_id from versions(B)
--aql select * from allversions(B)
--aql rename array B to A
--aql select * from dimensions(A)
--aql select * from scan(A)
store( redimension( apply(A,z,0), <a:int32, b:string> [z=0:0,1,0,x=0:3,3,0,y=0:2,3,0]), A2)
--aql select * from dimensions(A2)
store( redimension( A2, <a:int32, b:string> [x=0:3,3,0,y=0:2,3,0]), A3)
--aql select * from dimensions(A3)
--aql select * from aggregate(A,sum(a))
--aql select * from aggregate(A,avg(a))
--aql select * from aggregate(A,max(a))
--aql select * from aggregate(A,min(a))
--igdata --aql="select * from bernoulli(A,1)"
--aql select * from A where x between 0 and 1
--aql select * from subarray(A,1,1,1,1)
--aql select * from slice(A,y,1)
--aql select * from cross_join(A,A)

--cleanup
--aql drop array A
--aql drop array T
--aql drop array TS
--aql drop array D
--aql drop array C
--aql drop array A2
--aql drop array A3
--stop-query-logging
