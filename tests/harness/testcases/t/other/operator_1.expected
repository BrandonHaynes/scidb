SCIDB QUERY : <project(sort(list(),id),name)>
{n} name

SCIDB QUERY : <create array Test1 <a:double NULL, b: string> [x=0:9,2,0]>
Query was executed successfully

SCIDB QUERY : <create array Test2 <a:double> [x=1:2,2,0, y=1:2,2,0]>
Query was executed successfully

SCIDB QUERY : <create array Test22 <a:int64> [x=1:2,2,0, y=1:2,2,0]>
Query was executed successfully

SCIDB QUERY : <create array Test3 <y:int64> [a(double)=2,2,0]>
Query was executed successfully

SCIDB QUERY : <create array Test4 <y:int64> [a=1:2,2,0]>
Query was executed successfully

SCIDB QUERY : <project(sort(list(),id),name,id)>
[Query was executed successfully, ignoring data output by this query.]

SCIDB QUERY : <project(reverse(Test1),b)>
{x} b

SCIDB QUERY : <project(reverse(Test1),a)>
{x} a

SCIDB QUERY : <project(sort(Test1,b),a)>
{n} a

SCIDB QUERY : <project(join(Test1,Test1),a)>
[An error expected at this place for the query "project(join(Test1,Test1),a)". And it failed with error code = scidb::SCIDB_SE_SYNTAX::SCIDB_LE_AMBIGUOUS_ATTRIBUTE. Expected error code = scidb::SCIDB_SE_SYNTAX::SCIDB_LE_AMBIGUOUS_ATTRIBUTE.]

SCIDB QUERY : <project(join(Test1,cast(Test1, <val1:double NULL, val2: string> [x=0:9,2,0])),val1,a)>
{x} val1,a

SCIDB QUERY : <project(aggregate(Test1, max(a), min(b),avg(a)),b_min)>
{i} b_min
{0} null

SCIDB QUERY : <project(aggregate(Test1, max(a), min(b),avg(a)),a_max)>
{i} a_max
{0} null

SCIDB QUERY : <project(aggregate(Test1, max(a), min(b),avg(a)),a_avg)>
{i} a_avg
{0} null

SCIDB QUERY : <project(aggregate(Test1, max(a), min(b),avg(a)),a_avg,b_min,a_max)>
{i} a_avg,b_min,a_max
{0} null,null,null

SCIDB QUERY : <project(aggregate(Test1, ApproxDC(a), count(b),sum(a)),b_count,a_sum,a_ApproxDC)>
{i} b_count,a_sum,a_ApproxDC
{0} 0,0,0

SCIDB QUERY : <project(apply(Test1,c,a*10),c,a,b)>
{x} c,a,b

SCIDB QUERY : <project(subarray(between(Test1, 2,9),3,6),b)>
{x} b

SCIDB QUERY : <project(subarray(between(Test1, 2,9),3,6),b,a)>
{x} b,a

SCIDB QUERY : <store(project(subarray(between(Test1, 2,9),3,6),a,b),ZZ)>
{x} a,b

SCIDB QUERY : <project(xgrid(Test1,3),b)>
{x} b

SCIDB QUERY : <project(variable_window(Test1,x,0,1,sum(a),count(b)),a_sum)>
{x} a_sum

SCIDB QUERY : <project(regrid(Test1,2, sum(a),min(a),max(a),count(b)),a_max)>
{x} a_max

SCIDB QUERY : <project(window(Test1,1,2,sum(a),ApproxDC(b)),b_ApproxDC)>
{x} b_ApproxDC

SCIDB QUERY : <project(unpack(Test1,k),x,b,a)>
{k} x,b,a

SCIDB QUERY : <project(store(repart(Test1,<a:double NULL,b:string> [x=0:9,4,0]),YY),b)>
{x} b

SCIDB QUERY : <project(rank(Test1,b),b_rank)>
{x} b_rank

SCIDB QUERY : <project(rank(Test1),a_rank)>
{x} a_rank

SCIDB QUERY : <project(rank(Test1),a_rank,b)>
[An error expected at this place for the query "project(rank(Test1),a_rank,b)". And it failed with error code = scidb::SCIDB_SE_QPROC::SCIDB_LE_WRONG_OPERATOR_ARGUMENT2. Expected error code = scidb::SCIDB_SE_QPROC::SCIDB_LE_WRONG_OPERATOR_ARGUMENT2.]

SCIDB QUERY : <project(quantile(Test1,2),a_quantile,percentage)>
{quantile} a_quantile,percentage

SCIDB QUERY : <project(quantile(Test1,2,a),percentage)>
{quantile} percentage

SCIDB QUERY : <project(normalize(project(Test1,a)),a)>
{x} a

SCIDB QUERY : <project(merge(Test1,Test1),b,a)>
{x} b,a

SCIDB QUERY : <project(transpose(Test2),a)>
{y,x} a

SCIDB QUERY : <project(multiply(Test2,Test2), multiply)>
{x,y} multiply
{1,1} 0
{1,2} 0
{2,1} 0
{2,2} 0

SCIDB QUERY : <project(multiply(subarray(Test2),subarray(Test2,1,1,2,1)),multiply)>
{x,y} multiply
{0,0} 0
{1,0} 0

SCIDB QUERY : <project(transpose(Test2),a)>
{y,x} a

SCIDB QUERY : <project(versions(Test1),timestamp)>
{VersionNo} timestamp

SCIDB QUERY : <project(versions(Test1),timestamp,version_id)>
{VersionNo} timestamp,version_id

SCIDB QUERY : <project(attributes(Test1),nullable,type_id,name)>
{No} nullable,type_id,name
{0} true,'double','a'
{1} false,'string','b'

SCIDB QUERY : <project(attributes(Test2),nullable,type_id)>
{No} nullable,type_id
{0} false,'double'

SCIDB QUERY : <project(dimensions(Test1),length,chunk_overlap,name)>
{No} length,chunk_overlap,name
{0} 10,0,'x'

SCIDB QUERY : <project(dimensions(Test2),length,chunk_overlap,name)>
{No} length,chunk_overlap,name
{0} 2,0,'x'
{1} 2,0,'y'

SCIDB QUERY : <project(reshape(subarray(Test2,1,1,1,2),<a:double> [x=0:1,2,0 ,y=0:0,2,0]),a)>
{x,y} a

SCIDB QUERY : <project(thin(Test1,1,2),b,a)>
{x} b,a

SCIDB QUERY : <project(thin(Test1,1,2),a)>
{x} a

SCIDB QUERY : <project(thin(Test2,1,2,1,2),a)>
{x,y} a

SCIDB QUERY : <project(slice(Test2,x,2),a)>
{y} a

SCIDB QUERY : <project(apply(Test2,b,a+10),b,a)>
{x,y} b,a

SCIDB QUERY : <project(adddim(Test1,timestamp),a,b)>
{timestamp,x} a,b

SCIDB QUERY : <project(store(adddim(Test1,timestamp),ZZZ),b,a)>
{timestamp,x} b,a

SCIDB QUERY : <project(deldim(ZZZ),b)>
{x} b

SCIDB QUERY : <project(redimension(Test22,Test4),y)>
{a} y

SCIDB QUERY : <project(bernoulli(Test1,0.5,10),a)>
{x} a

SCIDB QUERY : <project(bernoulli(Test2,0.5,10),a)>
{x,y} a

SCIDB QUERY : <project(bernoulli(Test1,0.5,10),b,a)>
{x} b,a

SCIDB QUERY : <project(bernoulli(Test2,0.5,10),a)>
{x,y} a

SCIDB QUERY : <project(between(Test1,3,7),b,a)>
{x} b,a

SCIDB QUERY : <project(filter(Test1, x<>3),b,a)>
{x} b,a

SCIDB QUERY : <project(substitute(Test1,build(<a:double> [x=0:1,2,0], iif( x = 0, 20, 30))),b,a)>
{x} b,a

SCIDB QUERY : <project(store(redimension(build(Test2,x*3.9),Test3),Test3),y)>
[An error expected at this place for the query "project(store(redimension(build(Test2,x*3.9),Test3),Test3),y)". And it failed with error code = scidb::SCIDB_SE_QPROC::SCIDB_LE_NESTING_PROHIBITED. Expected error code = scidb::SCIDB_SE_QPROC::SCIDB_LE_NESTING_PROHIBITED.]

SCIDB QUERY : <store(redimension(build(Test2,x*3.9),Test3),Test3)>
{a} y
{3.9} 1
{7.8} 1

SCIDB QUERY : <project(Test3,y)>
{a} y
{3.9} 1
{7.8} 1

SCIDB QUERY : <store(redimension(Test2,Test3),Test3)>
{a} y

SCIDB QUERY : <project(Test3,y)>
{a} y

SCIDB QUERY : <remove(Test1)>
Query was executed successfully

SCIDB QUERY : <remove(Test2)>
Query was executed successfully

SCIDB QUERY : <remove(Test22)>
Query was executed successfully

SCIDB QUERY : <remove(Test3)>
Query was executed successfully

SCIDB QUERY : <remove(Test4)>
Query was executed successfully

SCIDB QUERY : <remove(ZZ)>
Query was executed successfully

SCIDB QUERY : <remove(YY)>
Query was executed successfully

SCIDB QUERY : <remove(ZZZ)>
Query was executed successfully

