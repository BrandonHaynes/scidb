--setup
--start-query-logging
# Ticket number: 1950
# Test covers INSERT on very sparse array
# Tested for bounded and unbounded combinations


create array R <val:int64> [x=0:10000,5000,0,y=0:10000,5000,0]
create array L <val:int64> [x=0:10000,5000,0,y=0:10000,5000,0]
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "load(L, '${TEST_DATA_DIR}/sparse_insert.txt')""

create array RU <val:int64> [x=0:*,5000,0,y=0:*,5000,0]
create array RU1 <val:int64> [x=0:10000,5000,0,y=0:10000,5000,0]
create array RU2 <val:int64> [x=0:10000,5000,0,y=0:*,5000,0]
create array LU <val:int64> [x=0:*,5000,0,y=0:*,5000,0]
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "load(LU, '${TEST_DATA_DIR}/sparse_insert.txt')""



--test
insert(L,R)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{1,1}(1100)],[{4999,4999}(9990)]]',true), R)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{100,100}(1100),{500,500}(9990)]]',true), R)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{4500,4500}(1),{1000,1000}(9)]]',true), R)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{10000,10000}(90)]]',true), R)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{9999,9999}(90)]]',true), R)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{5,5}(120)]];[[{7000,7000}(19)]]',true), R)

# Using build literal with unbounded dimension, insert is not possible

build(<val:int64> [x=0:*,5000,0,y=0:*,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true)

--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(build(<val:int64> [x=0:*,5000,0,y=0:*,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true), R)"

--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(build(<val:int64> [x=0:*,5000,0,y=0:10000,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true), R)"

--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(build(<val:int64> [x=0:*,5000,0,y=0:*,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true), RU1)"

--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(build(<val:int64> [x=0:*,5000,0,y=0:*,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true), RU2)"

--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{125,125}(1200),{2500,2500}(19)]]',true), RU)"

--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{125,125}(1200),{2500,2500}(19)]]',true), RU2)"

--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(L,RU)"
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_DIMENSIONS_DONT_MATCH "insert(L,RU2)"


insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true), R)
insert(scan(LU,true),RU)
insert(scan(LU,true),RU1)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{20,20}(1200),{250,250}(19)]]',true), RU1)
insert(build(<val:int64> [x=0:10000,5000,0,y=0:10000,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true), RU1)

insert(build(<val:int64> [x=0:*,5000,0,y=0:*,5000,0],'[[{25,25}(1200),{2500,2500}(19)]]',true), LU)

--cleanup
remove(R)
remove(L)
remove(RU)
remove(RU1)
remove(RU2)
remove(LU)
--stop-query-logging
