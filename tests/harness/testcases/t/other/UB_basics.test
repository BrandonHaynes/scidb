--setup
--start-query-logging

## Important note: The error code produced when merge applied on NID has error code:
## scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_NOT_IMPLEMENTED


CREATE array TS_Data_Load < Symbol : string, TS : string, Price : double, Qty : int64 > [ Line=0:*,50,0 ]

load ( TS_Data_Load, '${TEST_DATA_DIR}/UB_TS_Data.txt')

CREATE array Timeseries_Example < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,4,0, TS(string)=*,14,0 ]
CREATE ARRAY Timeseries_Lookup < Symbol : string, TS : string > [ Line=0:*,10,0 ]
CREATE ARRAY Sub_Val < sub : double > [ val=0:1,1,0 ]
load ( Timeseries_Lookup, '${TEST_DATA_DIR}/UB_Lookup_Keys.txt')
store(build(Sub_Val, 3.14), Sub_Val)    

--test
--set-format sparse
store(redimension( TS_Data_Load, Timeseries_Example, avg ( Price ) as Avg_Price, sum ( Qty ) as Total_Qty ), Timeseries_Example)

store(Timeseries_Example, new_Example)

scan (new_Example)

scan ( Timeseries_Example )

scan (TS_Data_Load)

scan (Timeseries_Lookup)

# This may be changed later.
--error "reshape (Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,14,0, Symbol(string)=*,4,0 ])"

aggregate ( Timeseries_Example, sum ( Avg_Price ) as aggr_res, Symbol )

apply (Timeseries_Example, apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (Timeseries_Example, 0.85, 1)"

between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( Timeseries_Example as A, Timeseries_Example as B)

deldim ( adddim (Timeseries_Example, New_Dim ))

filter (Timeseries_Example, Total_Qty > 150 )

join (Timeseries_Example as A, Timeseries_Example as B )

lookup ( Timeseries_Lookup,Timeseries_Example)

--error "merge ( filter ( Timeseries_Example, Total_Qty < 100 ) as A, filter ( Timeseries_Example, Total_Qty > 200 ) as B )"

multiply ( substitute (transpose ( project (Timeseries_Example, Avg_Price )), Sub_Val) AS A, substitute (project ( Timeseries_Example, Avg_Price), Sub_Val) AS B ) 

project ( Timeseries_Example, Avg_Price, Total_Qty )

repart ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (Timeseries_Example)

--igdata "bernoulli (Timeseries_Example, 0.85, 1)"

slice ( Timeseries_Example, Symbol, 'Mug' )

sort (slice ( Timeseries_Example, Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (Timeseries_Example, 0, 2, 0, 2)

transpose (Timeseries_Example)

unpack (Timeseries_Example, New_Dim )

window (Timeseries_Example, 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

--start-igdata

aggregate ( bernoulli (Timeseries_Example, 0.85, 1), sum ( Avg_Price ) as aggr_res, Symbol )

apply (bernoulli (Timeseries_Example, 0.85, 1), apply_res, 2.0 + Avg_Price )

bernoulli (bernoulli (Timeseries_Example, 0.85, 1), 0.85, 1)

between (bernoulli (Timeseries_Example, 0.85, 1), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( bernoulli (Timeseries_Example, 0.85, 1), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( bernoulli (Timeseries_Example, 0.85, 1) as A, bernoulli (Timeseries_Example, 0.85, 1) as B)

deldim ( adddim (bernoulli (Timeseries_Example, 0.85, 1), New_Dim ))

filter (bernoulli (Timeseries_Example, 0.85, 1), Total_Qty > 150 )

join (bernoulli (Timeseries_Example, 0.85, 1) as A, bernoulli (Timeseries_Example, 0.85, 1) as B )

lookup ( Timeseries_Lookup,bernoulli (Timeseries_Example, 0.85, 1))

--error "merge ( filter ( bernoulli (Timeseries_Example, 0.85, 1), Total_Qty < 100 ) as A, filter ( bernoulli (Timeseries_Example, 0.85, 1), Total_Qty > 200 ) as B )"

multiply ( substitute (transpose ( project (bernoulli (Timeseries_Example, 0.85, 1), Avg_Price )), Sub_Val) AS A, substitute (project ( bernoulli (Timeseries_Example, 0.85, 1), Avg_Price), Sub_Val) AS B ) 

project ( bernoulli (Timeseries_Example, 0.85, 1), Avg_Price, Total_Qty )

repart ( bernoulli (Timeseries_Example, 0.85, 1), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (bernoulli (Timeseries_Example, 0.85, 1))

--igdata "bernoulli (bernoulli (Timeseries_Example, 0.85, 1), 0.85, 1)"

slice ( bernoulli (Timeseries_Example, 0.85, 1), Symbol, 'Mug' )

sort (slice ( bernoulli (Timeseries_Example, 0.85, 1), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (bernoulli (Timeseries_Example, 0.85, 1), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (bernoulli (Timeseries_Example, 0.85, 1), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (bernoulli (Timeseries_Example, 0.85, 1), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (bernoulli (Timeseries_Example, 0.85, 1), 0, 2, 0, 2)

transpose (bernoulli (Timeseries_Example, 0.85, 1))

unpack (bernoulli (Timeseries_Example, 0.85, 1), New_Dim )

window (bernoulli (Timeseries_Example, 0.85, 1), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

aggregate ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), sum ( Avg_Price ) as aggr_res, Symbol )

apply (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), apply_res, 2.0 + Avg_Price )

bernoulli (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), 0.85, 1)

--stop-igdata

between (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ) as A, between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ) as B)

deldim ( adddim (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), New_Dim ))

filter (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Total_Qty > 150 )

join (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ) as A, between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ) as B )

lookup ( Timeseries_Lookup,between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ))

--error "merge ( filter ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Total_Qty < 100 ) as A, filter ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Total_Qty > 200 ) as B )"

multiply ( substitute (transpose ( project (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Avg_Price )), Sub_Val) AS A, substitute (project ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Avg_Price), Sub_Val) AS B )

project ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Avg_Price, Total_Qty )

repart ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ))

--igdata "bernoulli (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), 0.85, 1)"

slice ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Symbol, 'Mug' )

sort (slice ( between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), 0, 2, 0, 2)

transpose (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ))

unpack (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), New_Dim )

window (between (Timeseries_Example, 'Foo', 'T_003', 'Wump', 'T_006' ), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

aggregate ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), sum ( Avg_Price ) as aggr_res, Symbol )

apply (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), 0.85, 1)"

between (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]) as A, cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]) as B)

deldim ( adddim (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), New_Dim ))

filter (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Total_Qty > 150 )

join (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]) as A, cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]) as B )

lookup ( Timeseries_Lookup,cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]))

--error "merge ( filter ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Total_Qty < 100 ) as A, filter ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Total_Qty > 200 ) as B )"

# ERROR4
--error "multiply ( transpose ( project (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Avg_Price )) AS A, project ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Avg_Price) AS B ) "

project ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Avg_Price, Total_Qty )

repart ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

# #1542
reverse (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]))

--igdata "bernoulli (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), 0.85, 1)"

# NO_MAPPING
--error "slice ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Symbol, 'Mug' )"

# NO_MAPPING
--error "sort (slice ( cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Symbol, 'Mug' ), Total_Qty, Avg_Price )"

subarray (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

# #1543
thin (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), 0, 2, 0, 2)

transpose (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]))

unpack (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), New_Dim )

window (cast ( Timeseries_Example, < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ]), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

aggregate ( deldim ( adddim (Timeseries_Example, New_Dim )), sum ( Avg_Price ) as aggr_res, Symbol )

apply (deldim ( adddim (Timeseries_Example, New_Dim )), apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (deldim ( adddim (Timeseries_Example, New_Dim )), 0.85, 1)"

between (deldim ( adddim (Timeseries_Example, New_Dim )), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( deldim ( adddim (Timeseries_Example, New_Dim )), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( deldim ( adddim (Timeseries_Example, New_Dim )) as A, deldim ( adddim (Timeseries_Example, New_Dim )) as B)

deldim ( adddim (deldim ( adddim (Timeseries_Example, New_Dim )), New_Dim ))

filter (deldim ( adddim (Timeseries_Example, New_Dim )), Total_Qty > 150 )

join (deldim ( adddim (Timeseries_Example, New_Dim )) as A, deldim ( adddim (Timeseries_Example, New_Dim )) as B )

lookup ( Timeseries_Lookup,deldim ( adddim (Timeseries_Example, New_Dim )))

--error "merge ( filter ( deldim ( adddim (Timeseries_Example, New_Dim )), Total_Qty < 100 ) as A, filter ( deldim ( adddim (Timeseries_Example, New_Dim )), Total_Qty > 200 ) as B )"

# ERROR8 (formerly)
multiply ( substitute (transpose ( project (deldim ( adddim (Timeseries_Example, New_Dim )), Avg_Price )), Sub_Val) AS A, substitute (project ( deldim ( adddim (Timeseries_Example, New_Dim )), Avg_Price), Sub_Val) AS B ) 

project ( deldim ( adddim (Timeseries_Example, New_Dim )), Avg_Price, Total_Qty )

repart ( deldim ( adddim (Timeseries_Example, New_Dim )), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (deldim ( adddim (Timeseries_Example, New_Dim )))

--igdata "bernoulli (deldim ( adddim (Timeseries_Example, New_Dim )), 0.85, 1)"

slice ( deldim ( adddim (Timeseries_Example, New_Dim )), Symbol, 'Mug' )

sort (slice ( deldim ( adddim (Timeseries_Example, New_Dim )), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (deldim ( adddim (Timeseries_Example, New_Dim )), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (deldim ( adddim (Timeseries_Example, New_Dim )), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (deldim ( adddim (Timeseries_Example, New_Dim )), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (deldim ( adddim (Timeseries_Example, New_Dim )), 0, 2, 0, 2)

transpose (deldim ( adddim (Timeseries_Example, New_Dim )))

unpack (deldim ( adddim (Timeseries_Example, New_Dim )), New_Dim )

window (deldim ( adddim (Timeseries_Example, New_Dim )), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

aggregate ( filter (Timeseries_Example, Total_Qty > 150 ), sum ( Avg_Price ) as aggr_res, Symbol )

apply (filter (Timeseries_Example, Total_Qty > 150 ), apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (filter (Timeseries_Example, Total_Qty > 150 ), 0.85, 1)"

between (filter (Timeseries_Example, Total_Qty > 150 ), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( filter (Timeseries_Example, Total_Qty > 150 ), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( filter (Timeseries_Example, Total_Qty > 150 ) as A, filter (Timeseries_Example, Total_Qty > 150 ) as B)

deldim ( adddim (filter (Timeseries_Example, Total_Qty > 150 ), New_Dim ))

filter (filter (Timeseries_Example, Total_Qty > 150 ), Total_Qty > 150 )

join (filter (Timeseries_Example, Total_Qty > 150 ) as A, filter (Timeseries_Example, Total_Qty > 150 ) as B )

lookup ( Timeseries_Lookup,filter (Timeseries_Example, Total_Qty > 150 ))

--error "merge ( filter ( filter (Timeseries_Example, Total_Qty > 150 ), Total_Qty < 100 ) as A, filter ( filter (Timeseries_Example, Total_Qty > 150 ), Total_Qty > 200 ) as B )"

# ERROR8 (formerly)
multiply ( substitute (transpose ( project (filter (Timeseries_Example, Total_Qty > 150 ), Avg_Price )), Sub_Val) AS A, substitute (project ( filter (Timeseries_Example, Total_Qty > 150 ), Avg_Price), Sub_Val) AS B )

project ( filter (Timeseries_Example, Total_Qty > 150 ), Avg_Price, Total_Qty )

repart ( filter (Timeseries_Example, Total_Qty > 150 ), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (filter (Timeseries_Example, Total_Qty > 150 ))

--igdata "bernoulli (filter (Timeseries_Example, Total_Qty > 150 ), 0.85, 1)"

slice ( filter (Timeseries_Example, Total_Qty > 150 ), Symbol, 'Mug' )

sort (slice ( filter (Timeseries_Example, Total_Qty > 150 ), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (filter (Timeseries_Example, Total_Qty > 150 ), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (filter (Timeseries_Example, Total_Qty > 150 ), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (filter (Timeseries_Example, Total_Qty > 150 ), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (filter (Timeseries_Example, Total_Qty > 150 ), 0, 2, 0, 2)

transpose (filter (Timeseries_Example, Total_Qty > 150 ))

unpack (filter (Timeseries_Example, Total_Qty > 150 ), New_Dim )

window (filter (Timeseries_Example, Total_Qty > 150 ), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

aggregate ( project ( Timeseries_Example, Avg_Price, Total_Qty ), sum ( Avg_Price ) as aggr_res, Symbol )

apply (project ( Timeseries_Example, Avg_Price, Total_Qty ), apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (project ( Timeseries_Example, Avg_Price, Total_Qty ), 0.85, 1)"

between (project ( Timeseries_Example, Avg_Price, Total_Qty ), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( project ( Timeseries_Example, Avg_Price, Total_Qty ), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( project ( Timeseries_Example, Avg_Price, Total_Qty ) as A, project ( Timeseries_Example, Avg_Price, Total_Qty ) as B)

deldim ( adddim (project ( Timeseries_Example, Avg_Price, Total_Qty ), New_Dim ))

filter (project ( Timeseries_Example, Avg_Price, Total_Qty ), Total_Qty > 150 )

join (project ( Timeseries_Example, Avg_Price, Total_Qty ) as A, project ( Timeseries_Example, Avg_Price, Total_Qty ) as B )

lookup ( Timeseries_Lookup,project ( Timeseries_Example, Avg_Price, Total_Qty ))

--error "merge ( filter ( project ( Timeseries_Example, Avg_Price, Total_Qty ), Total_Qty < 100 ) as A, filter ( project ( Timeseries_Example, Avg_Price, Total_Qty ), Total_Qty > 200 ) as B )"

# ERROR8 (formerly)
multiply ( substitute (transpose ( project (project ( Timeseries_Example, Avg_Price, Total_Qty ), Avg_Price )), Sub_Val) AS A, substitute (project ( project ( Timeseries_Example, Avg_Price, Total_Qty ), Avg_Price), Sub_Val) AS B ) 

project ( project ( Timeseries_Example, Avg_Price, Total_Qty ), Avg_Price, Total_Qty )

repart ( project ( Timeseries_Example, Avg_Price, Total_Qty ), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (project ( Timeseries_Example, Avg_Price, Total_Qty ))

--igdata "bernoulli (project ( Timeseries_Example, Avg_Price, Total_Qty ), 0.85, 1)"

slice ( project ( Timeseries_Example, Avg_Price, Total_Qty ), Symbol, 'Mug' )

sort (slice ( project ( Timeseries_Example, Avg_Price, Total_Qty ), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (project ( Timeseries_Example, Avg_Price, Total_Qty ), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (project ( Timeseries_Example, Avg_Price, Total_Qty ), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (project ( Timeseries_Example, Avg_Price, Total_Qty ), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (project ( Timeseries_Example, Avg_Price, Total_Qty ), 0, 2, 0, 2)

transpose (project ( Timeseries_Example, Avg_Price, Total_Qty ))

unpack (project ( Timeseries_Example, Avg_Price, Total_Qty ), New_Dim )

window (project ( Timeseries_Example, Avg_Price, Total_Qty ), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

--start-igdata

aggregate ( bernoulli (Timeseries_Example, 0.85, 1), sum ( Avg_Price ) as aggr_res, Symbol )

apply (bernoulli (Timeseries_Example, 0.85, 1), apply_res, 2.0 + Avg_Price )

bernoulli (bernoulli (Timeseries_Example, 0.85, 1), 0.85, 1)

between (bernoulli (Timeseries_Example, 0.85, 1), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( bernoulli (Timeseries_Example, 0.85, 1), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( bernoulli (Timeseries_Example, 0.85, 1) as A, bernoulli (Timeseries_Example, 0.85, 1) as B)

deldim ( adddim (bernoulli (Timeseries_Example, 0.85, 1), New_Dim ))

filter (bernoulli (Timeseries_Example, 0.85, 1), Total_Qty > 150 )

join (bernoulli (Timeseries_Example, 0.85, 1) as A, bernoulli (Timeseries_Example, 0.85, 1) as B )

lookup ( Timeseries_Lookup,bernoulli (Timeseries_Example, 0.85, 1))

--error "merge ( filter ( bernoulli (Timeseries_Example, 0.85, 1), Total_Qty < 100 ) as A, filter ( bernoulli (Timeseries_Example, 0.85, 1), Total_Qty > 200 ) as B )"

# ERROR8 (formerly)
multiply ( substitute (transpose ( project (bernoulli (Timeseries_Example, 0.85, 1), Avg_Price )), Sub_Val) AS A, substitute (project ( bernoulli (Timeseries_Example, 0.85, 1), Avg_Price), Sub_Val) AS B )

project ( bernoulli (Timeseries_Example, 0.85, 1), Avg_Price, Total_Qty )

repart ( bernoulli (Timeseries_Example, 0.85, 1), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (bernoulli (Timeseries_Example, 0.85, 1))

bernoulli (bernoulli (Timeseries_Example, 0.85, 1), 0.85, 1)

slice ( bernoulli (Timeseries_Example, 0.85, 1), Symbol, 'Mug' )

sort (slice ( bernoulli (Timeseries_Example, 0.85, 1), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (bernoulli (Timeseries_Example, 0.85, 1), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (bernoulli (Timeseries_Example, 0.85, 1), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (bernoulli (Timeseries_Example, 0.85, 1), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (bernoulli (Timeseries_Example, 0.85, 1), 0, 2, 0, 2)

transpose (bernoulli (Timeseries_Example, 0.85, 1))

unpack (bernoulli (Timeseries_Example, 0.85, 1), New_Dim )

window (bernoulli (Timeseries_Example, 0.85, 1), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

--stop-igdata

aggregate ( scan (Timeseries_Example), sum ( Avg_Price ) as aggr_res, Symbol )

apply (scan (Timeseries_Example), apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (scan (Timeseries_Example), 0.85, 1)"

between (scan (Timeseries_Example), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( scan (Timeseries_Example), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( scan (Timeseries_Example) as A, scan (Timeseries_Example) as B)

deldim ( adddim (scan (Timeseries_Example), New_Dim ))

filter (scan (Timeseries_Example), Total_Qty > 150 )

join (scan (Timeseries_Example) as A, scan (Timeseries_Example) as B )

lookup ( Timeseries_Lookup,scan (Timeseries_Example))

--error "merge ( filter ( scan (Timeseries_Example), Total_Qty < 100 ) as A, filter ( scan (Timeseries_Example), Total_Qty > 200 ) as B )"

# ERROR8 (formerly)
multiply ( substitute (transpose ( project (scan (Timeseries_Example), Avg_Price )), Sub_Val) AS A, substitute (project ( scan (Timeseries_Example), Avg_Price), Sub_Val) AS B ) 

project ( scan (Timeseries_Example), Avg_Price, Total_Qty )

repart ( scan (Timeseries_Example), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (scan (Timeseries_Example))

--igdata "bernoulli (scan (Timeseries_Example), 0.85, 1)"

slice ( scan (Timeseries_Example), Symbol, 'Mug' )

sort (slice ( scan (Timeseries_Example), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (scan (Timeseries_Example), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (scan (Timeseries_Example), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (scan (Timeseries_Example), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (scan (Timeseries_Example), 0, 2, 0, 2)

transpose (scan (Timeseries_Example))

unpack (scan (Timeseries_Example), New_Dim )

window (scan (Timeseries_Example), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

aggregate ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), sum ( Avg_Price ) as aggr_res, Symbol )

apply (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), 0.85, 1)"

between (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), 'Foo', 'T_003', 'Wump', 'T_006' )

cast ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])

cross_join ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))) as A, join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))) as B)

deldim ( adddim (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), New_Dim ))

filter (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Total_Qty > 150 )

join (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))) as A, join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))) as B )

lookup ( Timeseries_Lookup,join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))))

--error "merge ( filter ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Total_Qty < 100 ) as A, filter ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Total_Qty > 200 ) as B )"

multiply ( transpose ( project (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Avg_Price )) AS A, project ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Avg_Price) AS B ) 

project ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Avg_Price, Total_Qty )

repart ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))))

--igdata "bernoulli (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), 0.85, 1)"

slice ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Symbol, 'Mug' )

sort (slice ( join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), 0, 2, 0, 2)

transpose (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))))

unpack (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), New_Dim )

window (join ( substitute ( project (Timeseries_Example, Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (Timeseries_Example, Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10)))), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )

aggregate ( transpose (Timeseries_Example), sum ( Avg_Price ) as aggr_res, Symbol )

apply (transpose (Timeseries_Example), apply_res, 2.0 + Avg_Price )

--igdata "bernoulli (transpose (Timeseries_Example), 0.85, 1)"

between (transpose (Timeseries_Example), 'Foo', 'T_003', 'Wump', 'T_006' )

# CAST_ERROR7
--error "cast ( transpose (Timeseries_Example), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ TS(string)=*,4,0, Symbol(string)=*,14,0 ])"

cross_join ( transpose (Timeseries_Example) as A, transpose (Timeseries_Example) as B)

deldim ( adddim (transpose (Timeseries_Example), New_Dim ))

filter (transpose (Timeseries_Example), Total_Qty > 150 )

join (transpose (Timeseries_Example) as A, transpose (Timeseries_Example) as B )

# NO_MAPPING
--error "lookup ( Timeseries_Lookup,transpose (Timeseries_Example))"

--error "merge ( filter ( transpose (Timeseries_Example), Total_Qty < 100 ) as A, filter ( transpose (Timeseries_Example), Total_Qty > 200 ) as B )"

# ERROR8 (formerly)
multiply ( substitute (transpose ( project (transpose (Timeseries_Example), Avg_Price )), Sub_Val) AS A, substitute (project ( transpose (Timeseries_Example), Avg_Price), Sub_Val) AS B ) 

project ( transpose (Timeseries_Example), Avg_Price, Total_Qty )

repart ( transpose (Timeseries_Example), < Avg_Price : double NULL, Total_Qty : int64 NULL > [ Symbol(string)=*,2,0, TS(string)=*,7,0 ])

reverse (transpose (Timeseries_Example))

--igdata "bernoulli (transpose (Timeseries_Example), 0.85, 1)"

slice ( transpose (Timeseries_Example), Symbol, 'Mug' )

sort (slice ( transpose (Timeseries_Example), Symbol, 'Mug' ), Total_Qty, Avg_Price )

subarray (transpose (Timeseries_Example), 'Foo', 'T_003', 'Wump', 'T_006' )

join ( substitute ( project (transpose (Timeseries_Example), Avg_Price ), build(<Avg_Price : double> [x=0:1,2,0], iif( x = 0, 20.0, 30.0))), substitute ( project (transpose (Timeseries_Example), Total_Qty), build(<Total_Qty : int64> [x=0:1,2,0], iif( x = 0, 100, 10))))

thin (transpose (Timeseries_Example), 0, 2, 0, 2)

transpose (transpose (Timeseries_Example))

unpack (transpose (Timeseries_Example), New_Dim )

window (transpose (Timeseries_Example), 0, 1, 0, 1, min(Avg_Price) as Avg_Price )


--cleanup
remove(Timeseries_Lookup)
remove(TS_Data_Load)
remove(Timeseries_Example)
remove(Sub_Val)
remove(new_Example)
--stop-query-logging
