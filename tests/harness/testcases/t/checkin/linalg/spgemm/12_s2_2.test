--setup
load_library('linear_algebra')

--start-query-logging

# csize 2x2 - easiest, single node
create array sp0_c2_2  <a:double>[x=0:1,2,0, y=0:1,2,0]
create array sp1_c2_2  <a:double>[x=0:1,2,0, y=0:1,2,0]
create array spI_c2_2   <a:double>[x=0:1,2,0, y=0:1,2,0]
# for debugging, make one where the digits indicate the row or column value
create array spRCDebugA_c2_2   <a:double>[x=0:1,2,0, y=0:1,2,0]
create array spRCDebugB_c2_2   <a:double>[x=0:1,2,0, y=0:1,2,0]

# csize 1x2 - distribute rows and cols
create array sp0_c1_1  <a:double>[x=0:1,1,0, y=0:1,1,0]
create array sp1_c1_1  <a:double>[x=0:1,1,0, y=0:1,1,0]
create array spI_c1_1   <a:double>[x=0:1,1,0, y=0:1,1,0]
# for debugging, make one where the digits indicate the row or column value
create array spRCDebugA_c1_1   <a:double>[x=0:1,1,0, y=0:1,1,0]
create array spRCDebugB_c1_1   <a:double>[x=0:1,1,0, y=0:1,1,0]

--test
# here, its ordered by what fills it, to make sure its the identical
#       formula with only the chunking changing
store( filter(build(sp0_c2_2,   1), false),  sp0_c2_2 )
store( filter(build(sp0_c1_1,   1), false),  sp0_c1_1 )

store( filter(build(sp1_c2_2,   1), true),  sp1_c2_2 )
store( filter(build(sp1_c1_1,   1), true),  sp1_c1_1 )

store( filter(build(spI_c2_2,   1), x=y),  spI_c2_2 )
store( filter(build(spI_c1_1,   1), x=y),  spI_c1_1 )

# two matrices with the leading values being RC, each as 1 digit, for debugging
store( filter(build(spRCDebugA_c2_2, 10*x+y),       true), spRCDebugA_c2_2)
store( filter(build(spRCDebugA_c1_1, 10*x+y),       true), spRCDebugA_c1_1)

# again at chunksize 1_1
store( filter(build(spRCDebugB_c2_2, (10*x+y)*100), true), spRCDebugB_c2_2)
store( filter(build(spRCDebugB_c1_1, (10*x+y)*100), true), spRCDebugB_c1_1)

# csize 2x2
spgemm(sp0_c2_2, sp0_c2_2, 'rightReplicate=true')
spgemm(sp0_c2_2, sp0_c2_2, 'rightReplicate=false')

spgemm(sp0_c2_2, sp1_c2_2, 'rightReplicate=true')
spgemm(sp0_c2_2, sp1_c2_2, 'rightReplicate=false')

spgemm(sp1_c2_2, sp0_c2_2, 'rightReplicate=true')
spgemm(sp1_c2_2, sp0_c2_2, 'rightReplicate=false')

spgemm(sp1_c2_2, sp1_c2_2, 'rightReplicate=true')
spgemm(sp1_c2_2, sp1_c2_2, 'rightReplicate=false')


spgemm(sp0_c2_2, spI_c2_2, 'rightReplicate=true')
spgemm(sp0_c2_2, spI_c2_2, 'rightReplicate=false')

spgemm(sp1_c2_2, spI_c2_2, 'rightReplicate=true')
spgemm(sp1_c2_2, spI_c2_2, 'rightReplicate=false')

spgemm(spI_c2_2, sp0_c2_2, 'rightReplicate=true')
spgemm(spI_c2_2, sp0_c2_2, 'rightReplicate=false')

spgemm(spI_c2_2, sp1_c2_2, 'rightReplicate=true')
spgemm(spI_c2_2, sp1_c2_2, 'rightReplicate=false')


spgemm(spRCDebugA_c2_2, spI_c2_2, 'rightReplicate=true')
spgemm(spRCDebugA_c2_2, spI_c2_2, 'rightReplicate=false')

spgemm(spI_c2_2,        spRCDebugA_c2_2, 'rightReplicate=true')
spgemm(spI_c2_2,        spRCDebugA_c2_2, 'rightReplicate=false')

# expect [[00*0 + 10*1000 = 1000, 00*100+01*1100= 1100],
#         [10*0 + 11*1000 =11000, 10*100+11*1100=13100]]
# for both lines below, since B=A*100=100*B so A*(A*100) == (100*A)*A
spgemm(spRCDebugA_c2_2, spRCDebugB_c2_2, 'rightReplicate=true')
spgemm(spRCDebugA_c2_2, spRCDebugB_c2_2, 'rightReplicate=false')

spgemm(spRCDebugB_c2_2, spRCDebugA_c2_2, 'rightReplicate=true')
spgemm(spRCDebugB_c2_2, spRCDebugA_c2_2, 'rightReplicate=false')


# csize 2x2 -- repeat for min.+ (this is where looping would help a lot!)
spgemm(sp0_c2_2, sp0_c2_2, 'min.+', 'rightReplicate=true')
spgemm(sp0_c2_2, sp0_c2_2, 'min.+', 'rightReplicate=false')

spgemm(sp0_c2_2, sp1_c2_2, 'min.+', 'rightReplicate=true')
spgemm(sp0_c2_2, sp1_c2_2, 'min.+', 'rightReplicate=false')

spgemm(sp1_c2_2, sp0_c2_2, 'min.+', 'rightReplicate=true')
spgemm(sp1_c2_2, sp0_c2_2, 'min.+', 'rightReplicate=false')

spgemm(sp1_c2_2, sp1_c2_2, 'min.+', 'rightReplicate=true')
spgemm(sp1_c2_2, sp1_c2_2, 'min.+', 'rightReplicate=false')


spgemm(sp0_c2_2, spI_c2_2, 'min.+', 'rightReplicate=true')
spgemm(sp0_c2_2, spI_c2_2, 'min.+', 'rightReplicate=false')

spgemm(sp1_c2_2, spI_c2_2, 'min.+', 'rightReplicate=true')
spgemm(sp1_c2_2, spI_c2_2, 'min.+', 'rightReplicate=false')

spgemm(spI_c2_2, sp0_c2_2, 'min.+', 'rightReplicate=true')
spgemm(spI_c2_2, sp0_c2_2, 'min.+', 'rightReplicate=false')

spgemm(spI_c2_2, sp1_c2_2, 'min.+', 'rightReplicate=true')
spgemm(spI_c2_2, sp1_c2_2, 'min.+', 'rightReplicate=false')


spgemm(spRCDebugA_c2_2, spI_c2_2, 'min.+', 'rightReplicate=true')
spgemm(spRCDebugA_c2_2, spI_c2_2, 'min.+', 'rightReplicate=false')

spgemm(spI_c2_2,        spRCDebugA_c2_2, 'min.+', 'rightReplicate=true')
spgemm(spI_c2_2,        spRCDebugA_c2_2, 'min.+', 'rightReplicate=false')

spgemm(spRCDebugA_c2_2, spRCDebugB_c2_2, 'min.+', 'rightReplicate=true')
spgemm(spRCDebugA_c2_2, spRCDebugB_c2_2, 'min.+', 'rightReplicate=false')

spgemm(spRCDebugB_c2_2, spRCDebugA_c2_2, 'min.+', 'rightReplicate=true')
spgemm(spRCDebugB_c2_2, spRCDebugA_c2_2, 'min.+', 'rightReplicate=false')


# csize 2x2 -- repeat for max.+
spgemm(sp0_c2_2, sp0_c2_2, 'max.+', 'rightReplicate=true')
spgemm(sp0_c2_2, sp0_c2_2, 'max.+', 'rightReplicate=false')

spgemm(sp0_c2_2, sp1_c2_2, 'max.+', 'rightReplicate=true')
spgemm(sp0_c2_2, sp1_c2_2, 'max.+', 'rightReplicate=false')

spgemm(sp1_c2_2, sp0_c2_2, 'max.+', 'rightReplicate=true')
spgemm(sp1_c2_2, sp0_c2_2, 'max.+', 'rightReplicate=false')

spgemm(sp1_c2_2, sp1_c2_2, 'max.+', 'rightReplicate=true')
spgemm(sp1_c2_2, sp1_c2_2, 'max.+', 'rightReplicate=false')

spgemm(sp0_c2_2, spI_c2_2, 'max.+', 'rightReplicate=true')
spgemm(sp0_c2_2, spI_c2_2, 'max.+', 'rightReplicate=false')

spgemm(sp1_c2_2, spI_c2_2, 'max.+', 'rightReplicate=true')
spgemm(sp1_c2_2, spI_c2_2, 'max.+', 'rightReplicate=false')

spgemm(spI_c2_2, sp0_c2_2, 'max.+', 'rightReplicate=true')
spgemm(spI_c2_2, sp0_c2_2, 'max.+', 'rightReplicate=false')

spgemm(spI_c2_2, sp1_c2_2, 'max.+', 'rightReplicate=true')
spgemm(spI_c2_2, sp1_c2_2, 'max.+', 'rightReplicate=false')

spgemm(spRCDebugA_c2_2, spI_c2_2, 'max.+', 'rightReplicate=true')
spgemm(spRCDebugA_c2_2, spI_c2_2, 'max.+', 'rightReplicate=false')

spgemm(spI_c2_2,        spRCDebugA_c2_2, 'max.+', 'rightReplicate=true')
spgemm(spI_c2_2,        spRCDebugA_c2_2, 'max.+', 'rightReplicate=false')

spgemm(spRCDebugA_c2_2, spRCDebugB_c2_2, 'max.+', 'rightReplicate=true')
spgemm(spRCDebugA_c2_2, spRCDebugB_c2_2, 'max.+', 'rightReplicate=false')

spgemm(spRCDebugB_c2_2, spRCDebugA_c2_2, 'max.+', 'rightReplicate=true')
spgemm(spRCDebugB_c2_2, spRCDebugA_c2_2, 'max.+', 'rightReplicate=false')



# NOCHECKIN ... need to add a test for non-square chunsize which will fail
#                the result in some cases (check current version too)
#  e.g. 1_2 * 2_1 ... the second instance when multiplying left, there will be no right chunk


# csize 1x1
# expect the same answers as for csize 2x2
spgemm(sp0_c1_1, sp0_c1_1, 'rightReplicate=true')
spgemm(sp0_c1_1, sp0_c1_1, 'rightReplicate=false')

spgemm(sp0_c1_1, sp1_c1_1, 'rightReplicate=true')
spgemm(sp0_c1_1, sp1_c1_1, 'rightReplicate=false')

spgemm(sp1_c1_1, sp0_c1_1, 'rightReplicate=true')
spgemm(sp1_c1_1, sp0_c1_1, 'rightReplicate=false')

spgemm(sp1_c1_1, sp1_c1_1, 'rightReplicate=true')
spgemm(sp1_c1_1, sp1_c1_1, 'rightReplicate=false')


spgemm(sp0_c1_1, spI_c1_1, 'rightReplicate=true')
spgemm(sp0_c1_1, spI_c1_1, 'rightReplicate=false')

spgemm(sp1_c1_1, spI_c1_1, 'rightReplicate=true')
spgemm(sp1_c1_1, spI_c1_1, 'rightReplicate=false')

spgemm(spI_c1_1, sp0_c1_1, 'rightReplicate=true')
spgemm(spI_c1_1, sp0_c1_1, 'rightReplicate=false')

spgemm(spI_c1_1, sp1_c1_1, 'rightReplicate=true')
spgemm(spI_c1_1, sp1_c1_1, 'rightReplicate=false')


spgemm(spRCDebugA_c1_1, spI_c1_1, 'rightReplicate=true')
spgemm(spRCDebugA_c1_1, spI_c1_1, 'rightReplicate=false')

spgemm(spI_c1_1,        spRCDebugA_c1_1, 'rightReplicate=true')
spgemm(spI_c1_1,        spRCDebugA_c1_1, 'rightReplicate=false')

spgemm(spRCDebugA_c1_1, spRCDebugB_c1_1, 'rightReplicate=true')
spgemm(spRCDebugA_c1_1, spRCDebugB_c1_1, 'rightReplicate=false')

spgemm(spRCDebugB_c1_1, spRCDebugA_c1_1, 'rightReplicate=true')
spgemm(spRCDebugB_c1_1, spRCDebugA_c1_1, 'rightReplicate=false')


# csize 1x1 - repeat for min.+
spgemm(sp0_c1_1, sp0_c1_1, 'min.+', 'rightReplicate=true')
spgemm(sp0_c1_1, sp0_c1_1, 'min.+', 'rightReplicate=false')

spgemm(sp0_c1_1, sp1_c1_1, 'min.+', 'rightReplicate=true')
spgemm(sp0_c1_1, sp1_c1_1, 'min.+', 'rightReplicate=false')

spgemm(sp1_c1_1, sp0_c1_1, 'min.+', 'rightReplicate=true')
spgemm(sp1_c1_1, sp0_c1_1, 'min.+', 'rightReplicate=false')

spgemm(sp1_c1_1, sp1_c1_1, 'min.+', 'rightReplicate=true')
spgemm(sp1_c1_1, sp1_c1_1, 'min.+', 'rightReplicate=false')


spgemm(sp0_c1_1, spI_c1_1, 'min.+', 'rightReplicate=true')
spgemm(sp0_c1_1, spI_c1_1, 'min.+', 'rightReplicate=false')

spgemm(sp1_c1_1, spI_c1_1, 'min.+', 'rightReplicate=true')
spgemm(sp1_c1_1, spI_c1_1, 'min.+', 'rightReplicate=false')

spgemm(spI_c1_1, sp0_c1_1, 'min.+', 'rightReplicate=true')
spgemm(spI_c1_1, sp0_c1_1, 'min.+', 'rightReplicate=false')

spgemm(spI_c1_1, sp1_c1_1, 'min.+', 'rightReplicate=true')
spgemm(spI_c1_1, sp1_c1_1, 'min.+', 'rightReplicate=false')


spgemm(spRCDebugA_c1_1, spI_c1_1, 'min.+', 'rightReplicate=true')
spgemm(spRCDebugA_c1_1, spI_c1_1, 'min.+', 'rightReplicate=false')

spgemm(spI_c1_1,        spRCDebugA_c1_1, 'min.+', 'rightReplicate=true')
spgemm(spI_c1_1,        spRCDebugA_c1_1, 'min.+', 'rightReplicate=false')

spgemm(spRCDebugA_c1_1, spRCDebugB_c1_1, 'min.+', 'rightReplicate=true')
spgemm(spRCDebugA_c1_1, spRCDebugB_c1_1, 'min.+', 'rightReplicate=false')

spgemm(spRCDebugB_c1_1, spRCDebugA_c1_1, 'min.+', 'rightReplicate=true')
spgemm(spRCDebugB_c1_1, spRCDebugA_c1_1, 'min.+', 'rightReplicate=false')


# csize 1x1 repeate for max.+
spgemm(sp0_c1_1, sp0_c1_1, 'max.+', 'rightReplicate=true')
spgemm(sp0_c1_1, sp0_c1_1, 'max.+', 'rightReplicate=false')

spgemm(sp0_c1_1, sp1_c1_1, 'max.+', 'rightReplicate=true')
spgemm(sp0_c1_1, sp1_c1_1, 'max.+', 'rightReplicate=false')

spgemm(sp1_c1_1, sp0_c1_1, 'max.+', 'rightReplicate=true')
spgemm(sp1_c1_1, sp0_c1_1, 'max.+', 'rightReplicate=false')

spgemm(sp1_c1_1, sp1_c1_1, 'max.+', 'rightReplicate=true')
spgemm(sp1_c1_1, sp1_c1_1, 'max.+', 'rightReplicate=false')


spgemm(sp0_c1_1, spI_c1_1, 'max.+', 'rightReplicate=true')
spgemm(sp0_c1_1, spI_c1_1, 'max.+', 'rightReplicate=false')

spgemm(sp1_c1_1, spI_c1_1, 'max.+', 'rightReplicate=true')
spgemm(sp1_c1_1, spI_c1_1, 'max.+', 'rightReplicate=false')

spgemm(spI_c1_1, sp0_c1_1, 'max.+', 'rightReplicate=true')
spgemm(spI_c1_1, sp0_c1_1, 'max.+', 'rightReplicate=false')

spgemm(spI_c1_1, sp1_c1_1, 'max.+', 'rightReplicate=true')
spgemm(spI_c1_1, sp1_c1_1, 'max.+', 'rightReplicate=false')


spgemm(spRCDebugA_c1_1, spI_c1_1, 'max.+', 'rightReplicate=true')
spgemm(spRCDebugA_c1_1, spI_c1_1, 'max.+', 'rightReplicate=false')

spgemm(spI_c1_1,        spRCDebugA_c1_1, 'max.+', 'rightReplicate=true')
spgemm(spI_c1_1,        spRCDebugA_c1_1, 'max.+', 'rightReplicate=false')

spgemm(spRCDebugA_c1_1, spRCDebugB_c1_1, 'max.+', 'rightReplicate=true')
spgemm(spRCDebugA_c1_1, spRCDebugB_c1_1, 'max.+', 'rightReplicate=false')

spgemm(spRCDebugB_c1_1, spRCDebugA_c1_1, 'max.+', 'rightReplicate=true')
spgemm(spRCDebugB_c1_1, spRCDebugA_c1_1, 'max.+', 'rightReplicate=false')




--cleanup

# csize 2x2
remove(sp0_c2_2)
remove(sp1_c2_2)
remove(spI_c2_2)
remove(spRCDebugA_c2_2)
remove(spRCDebugB_c2_2)

# csize 1x2
#remove(sp0_c1_2)
#remove(sp1_c1_2)
#remove(spI_c1_2)

# csize 2x1
#remove(sp0_c2_1)
#remove(sp1_c2_1)
#remove(spI_c2_1)

# csize 1x1
remove(sp0_c1_1)
remove(sp1_c1_1)
remove(spI_c1_1)
remove(spRCDebugA_c1_1)
remove(spRCDebugB_c1_1)

--stop-query-logging
