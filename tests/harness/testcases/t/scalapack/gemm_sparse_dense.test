--setup
load_library('dense_linear_algebra')

--start-query-logging

#CREATE ARRAY M5x5_dense<a: double >[I=0:4,1,0,J=0:4,1,0]
#CREATE ARRAY M5x5_Sparse <a1: double> [x=0:4,1,0,y=0:4,1,0]
#create ARRAY M5x5<a:double> [x=0:4,1,0,y=0:4,1,0]
#store ( build (M5x5_dense, 5*I + J ), M5x5_dense)
#build_sparse(M5x5_Sparse, 1.0*x+100.0*y, x=y)
#store ( build (M5x5, 5*x + y ), M5x5)


CREATE ARRAY M5x5_dense<a: double >[I=0:4,32,0,J=0:4,32,0]
CREATE ARRAY M5x5_Sparse <a1: double> [x=0:4,32,0,y=0:4,32,0]
create ARRAY M5x5<a:double> [x=0:4,32,0,y=0:4,32,0]
# 0-24, row-major order
store ( build (M5x5_dense, 5*I + J ), M5x5_dense)
store ( build (M5x5, 5*x + y ), M5x5)
# diagonal only, 0, 101, 202, 303, 404
store ( filter(build(M5x5_Sparse, 1.0*x+100.0*y), x=y), M5x5_Sparse)


# similar to above block
CREATE ARRAY M5x5_dense_c2<a: double >[I=0:4,32,0,J=0:4,32,0]
CREATE ARRAY M5x5_Sparse_c2<a1: double> [x=0:4,32,0,y=0:4,32,0]
create array M5x5_c2<a:double> [x=0:4,32,0,y=0:4,32,0]
store ( build (M5x5_dense_c2, 5*I + J ), M5x5_dense_c2)
store ( build (M5x5_c2, 5*x + y ), M5x5_c2)
store ( filter(build(M5x5_Sparse_c2, 1.0*x+100.0*y), x=y), M5x5_Sparse_c2)

# similar to above block, but dimensions not numbered from zero
# NOTE: the behavior of gemm given arrays that are not numbered
# starting at zero is documented as being subject to change,
# because it is under review, and we are not confident
# that the current behavior will be preserved.  see also #2202

CREATE ARRAY M4x4_dense_nzd<a: double >[I=1:4,32,0,J=1:4,32,0]
CREATE ARRAY M4x4_Sparse_nzd<a1: double> [x=1:4,32,0,y=1:4,32,0]
create array M4x4_nzd<a:double> [x=1:4,32,0,y=1:4,32,0]
store ( build (M4x4_dense_nzd, 5*I + J ), M4x4_dense_nzd)
store ( build (M4x4_nzd, 5*x + y ), M4x4_nzd)
store ( filter(build(M4x4_Sparse_nzd, 1.0*x+100.0*y), x=y), M4x4_Sparse_nzd)


# rectangular matrices
CREATE ARRAY M5x2_dense_new<a: double >[I=0:4,32,0,J=0:1,32,0]
CREATE ARRAY M2x5_Sparse<a1: double> [x=0:1,32,0,y=0:4,32,0]
store ( build (M5x2_dense_new, 5*I+J ), M5x2_dense_new)
store ( filter(build(M2x5_Sparse, 1.0*x+100.0*y), x=y), M2x5_Sparse)

--test

load_library('dense_linear_algebra')
#1.gemm with Dense array and sparse array having Dimensions starting with 0
# Supported
gemm(M5x5_dense,M5x5_Sparse,M5x5)

#2.gemm with dense and sparse matrix chunk size more  than 32
# NOT SUPPORTED at this time
# Disabled until Linear Algebra operators have auto-repartion. [part of #2200]
# (#2200 blocked on #2302, "requiresRepart not fully functional")
gemm(M5x5_dense_c2,M5x5_Sparse_c2,M5x5_c2)
#3.gemm with Dense array and sparse array having Dimensions starting with non zero.
# NOT SUPPORTED at this time. [part of #2200]
# bocked on various tickets about the meaning of "sparse", between, subarray, and
# #2202 "Create rules of math operations ... Matrices"
#gemm(M4x4_dense_nzd,M4x4_Sparse_nzd,M4x4_nzd)

#4.gemm with rectangular Dense array and rectangular sparse array having Dimensions starting with non zero.Presntly nt working for #multiinstances
gemm(M5x2_dense_new,M2x5_Sparse,M5x5)

--cleanup

remove(M5x5_dense)
remove(M5x5_Sparse)
remove(M5x5)

remove(M5x5_dense_c2)
remove(M5x5_Sparse_c2)
remove(M5x5_c2)

remove(M4x4_dense_nzd)
remove(M4x4_Sparse_nzd)
remove(M4x4_nzd)

remove(M5x2_dense_new)
remove(M2x5_Sparse)

--stop-query-logging





