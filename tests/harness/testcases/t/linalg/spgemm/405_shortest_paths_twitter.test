--setup
load_library('linear_algebra')

# here's some basic scale info on the twitter data and these cut-down versions of it
# FID MAXVERT   DATA FILENAME                            SPARSITY
# 409 568770231 twitter_combined_unique.csv (1,768,149); 321 (2420766 edges)
# 408  22309220 twitter_combined_unique_1280k.csv
#      62185119 twitter_combined_unique_1000k.csv         62
# 407  22309220 twitter_combined_unique_640k.csv
# 406  15484730 twitter_combined_unique_320k.csv
# 405  10959642 twitter_combined_unique_160k.csv
# 404   4143281 twitter_combined_unique_80k.csv
# 403    818340 twitter_combined_unique_40k.csv
# 402    428333 twitter_combined_unique_20k.csv            1.2
# 401     12830 twitter_combined_unique_10k.csv            1.2
# 400       422 twitter_combined_unique_1k.csv   truncated to square, <100 NZ's

--justrun "remove(GRAPH_PAIRS)"
create array GRAPH_PAIRS <v0:int64, v1:int64>[dummy=0:*,10000*10000,0]


--justrun "remove(GRAPH_WEIGHTS)"

# create statements:
# FID MAXVERT
# 409 ????K create array  GRAPH_WEIGHTS <w:float>[v0=0:568770231, 568770231/4+1,0, v1=0:568770231, 568770231/4+1,0]
# 408 1280K create array  GRAPH_WEIGHTS <w:float>[v0=0:xxxxxxxx,   xxxxxxxx/4+1,0,  v1=0:xxxxxxxx,  xxxxxxxx/4+1,0]
# 407  640K create array  GRAPH_WEIGHTS <w:float>[v0=0:22309220,   22309220/4+1,0,  v1=0:22309220,  22309220/4+1,0]
# 406  320K create array  GRAPH_WEIGHTS <w:float>[v0=0:15484730,   15484730/4+1,0,  v1=0:15484730,  15484730/4+1,0]
# 405  160K create array  GRAPH_WEIGHTS <w:float>[v0=0:10959642,   10959642/4+1,0,  v1=0:10959642,  10959642/4+1,0]
create array  GRAPH_WEIGHTS <w:float>[v0=0:10959642,   10959642/4+1,0,  v1=0:10959642,  10959642/4+1,0]
# 404   80K create array  GRAPH_WEIGHTS <w:float>[v0=0: 4143281,    4143281/4+1,0,  v1=0: 4143281,   4143281/4+1,0]
# 403   40K create array  GRAPH_WEIGHTS <w:float>[v0=0:  818340,     818340/4+1,0,    v1=0:818340,    818340/4+1,0]
# 402   20K create array  GRAPH_WEIGHTS <w:float>[v0=0:  428333,     428333/4+1,0,    v1=0:428333,    428333/4+1,0]
# 401   10K create array  GRAPH_WEIGHTS <w:float>[v0=0:   12830,      12830/4+1,0,    v1=0: 12830,     12830/4+1,0]
# 400    1K create array  GRAPH_WEIGHTS <w:float>[v0=0:1000,        250,0,        v1=0:1000,      250,0]


--start-query-logging
--start-igdata

--shell --command "ln -s /public/data/p4linalg/twitter_combined_unique_160k.csv /tmp/405_twitter.csv.link"
--shell --store --command "iquery -p ${IQUERY_PORT} -c ${IQUERY_HOST} -naq "load(GRAPH_PAIRS, '/tmp/405_twitter.csv.link', -2, 'csv')" "
--shell --command "rm /tmp/405_twitter.csv.link"

# turn list of pairs into adjacency matrix
#   what should the initialization be?  1/n  where n is ... what?
#store(redimension(apply(GRAPH_PAIRS, w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)
#405 store( redimension(apply(filter(GRAPH_PAIRS, v0<=10959642 and v1<=10959642), w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)
store( redimension(apply(filter(GRAPH_PAIRS, v0<=10959642 and v1<=10959642), w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)
#404 store(redimension(apply(filter(GRAPH_PAIRS,  v0<=6210882 and  v1<=6210882), w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)
#403 store(redimension(apply(filter(GRAPH_PAIRS,   v0<=818340 and   v1<=818340), w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)
#402 store(redimension(apply(filter(GRAPH_PAIRS,   v0<=428333 and   v1<=428333), w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)
#401 store(redimension(apply(filter(GRAPH_PAIRS,    v0<=12830 and    v1<=12830), w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)
#400 store(redimension(apply(filter(GRAPH_PAIRS,     v0<=1000 and     v1<=1000), w, float(1.0)), GRAPH_WEIGHTS), GRAPH_WEIGHTS)

--stop-igdata

--test

# now call bellmanFord, finding the distances from the 12 vertex
--justrun "remove(SHORTEST_PATHS_VEC)"
--shell --command "bellman_ford_example.sh GRAPH_WEIGHTS SHORTEST_PATHS_VEC 12"
show(SHORTEST_PATHS_VEC)
aggregate(SHORTEST_PATHS_VEC, count(*))
aggregate(SHORTEST_PATHS_VEC, sum(multiply))
aggregate(SHORTEST_PATHS_VEC, avg(multiply))
#
# and again from vertex 422
--justrun "remove(SHORTEST_PATHS_VEC)"
--shell --command "bellman_ford_example.sh GRAPH_WEIGHTS SHORTEST_PATHS_VEC 422"
show(SHORTEST_PATHS_VEC)
aggregate(SHORTEST_PATHS_VEC, count(*))
aggregate(SHORTEST_PATHS_VEC, sum(multiply))
aggregate(SHORTEST_PATHS_VEC, avg(multiply))

--cleanup
remove(GRAPH_PAIRS)
remove(GRAPH_WEIGHTS)
remove(SHORTEST_PATHS_VEC)



