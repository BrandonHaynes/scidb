
--test
--start-query-logging

--set-format dcsv
--start-igdata
--aql CREATE ARRAY A <x: double, err: double> [i=0:99,10,0, j=0:99,10,0]
remove(A)
--set-format dense
--stop-igdata
store(build(<index:int64>[i=0:9,10,0], i*50), A)
--start-igdata
store(build(<val:double>[i=0:9,10,0], random()%2000/2000.0), B)
--set-format dcsv
--stop-igdata
--start-igdata
store(join(A,B), test)
--stop-igdata
--start-igdata
redimension(test, <val:double>[index=0:*, 50,0])
--set-format dense
--stop-igdata
redimension(apply(build(<v:double>[i1=1:3,3,0,j1=1:3,3,0],5.5), i,iif(i1+j1>4,i1,null), j,iif(i1+j1>4,j1,null)), <v:double>[i=1:3,3,0,j=1:3,3,0])
--set-format dcsv
redimension( apply (build(<v:double>[i1=1:3,3,0,j1=1:3,3,0],5.5), i, iif(i1+j1>4,i1,null), j, iif(i1+j1>4,j1,null)), <v:double>[i=1:3,3,0,j=1:3,3,0])
--start-igdata
--aql DROP ARRAY A
--aql CREATE ARRAY products <name:string,price:float default float(100.0),sold:datetime> [i=0:*,10,0]
--aql CREATE ARRAY product_null <name:string NULL,price:float NULL,sold:datetime NULL> [i=0:*,10,0]
--aql CREATE ARRAY product_dflt <name:string, price:float default float(100.0), sold:datetime> [i=0:*,10,0]
create_array(m4x4_first,<val1:double>[x=0:3,4,0, y=0:3,4,0],false)
store(build(m4x4_first, '[[0,1,2,3],[4,5,6,7],[8,9,(),11],[12,13,14,15]]',true), m4x4_first)
create_array(m4x4_second,<val2:int32>[x=0:3,4,0, y=0:3,4,0],false)
store(build(m4x4_second,'[[100,99,98,97],[0,95,94,93],[92,91,(),89],[88,0,86,85]]',true),m4x4_second)
--set-format dense
--stop-igdata
store(join(m4x4_first, m4x4_second),m4x4_missing)
--set-format dcsv
--start-igdata
store(build(m4x4_second,'[[100,99,98,97],[5468,95,94,93],[92,91,(),89],[88,5468,86,85]]',true),m4x4_second)
--set-format dense
--stop-igdata
store(join(m4x4_first, m4x4_second),m4x4_missing)
--set-format dcsv
--start-igdata
create array D<val1:char default 'a', val2:int32 default 1, val3:int64 null default missing(30)> [i=0:9,10,0]
--set-format dense
--stop-igdata
show(D)
--set-format dcsv
--start-igdata
store(build(<val:double null> [i=0:4,5,0], '[47.0, ?, -21.1, ?100, ?50]',true), A)
--set-format dense
--stop-igdata
scan(A)
--set-format dcsv
apply(A,MRcode, missing_reason(val))
--start-igdata
store(build(<val:int32 null default null> [i=0:5,6,0], '[1,47,23,0,127,100]',true), arrayB)
--set-format dense
--stop-igdata
scan(arrayB)
--set-format dcsv
apply(arrayB,MRcode, missing(val))
--start-igdata
--aql CREATE ARRAY open <val:double>[I=0:9,10,0,J=0:*,10,0]
--aql CREATE ARRAY default_1 <val:double>[i]
--stop-igdata
show(default_1)
--start-igdata
--aql CREATE ARRAY default_2 <val:double>[i=0:999,200,0, j,k]
--stop-igdata
show(default_2)
--start-igdata
CREATE ARRAY winners <person:string, time:double, event:string> [year=1996:2008,1000,0]
create array event <event:string> [i=0:11,12,0]
create array year <year:int64>[i=0:11,12,0]
create array person <person:string>[i=0:11,12,0]
create array country <country:string>[i=0:11,12,0]
create array time <time:double>[i=0:11,12,0]
store(build(event,iif(i<4,'dash',iif(i<8,'steeplechase','marathon'))),event)
store(build(year,1996+(i%4 * 4)),year)
store(build(person,'[Bailey,Greene,Gatlin,Bolt,Keter,Kosgei,Kemboi,Kipruto,Thugwane,Abera,Baldini,Wanjiru]',true),person)
store(build(country,'[Canada,USA,USA,Jamaica,Kenya,Kenya,Kenya,Kenya,USA,Ethiopia,Italy,Kenya]',true),country)
store(build(time,'[(9.84),(9.87),(9.85),(9.69),(487.12),(503.17),(485.81),(490.34),(7956),(7811),(7855),(7596)]',true),time)
store(join(event,join(person,join(year,join(country,time)))),winnersFlat)
store(redimension(winnersFlat,winners),winners)
--stop-igdata
show(winners)
--start-igdata
rename(winners, OlympicWinners)
--stop-igdata
show(OlympicWinners)
--aql SELECT * INTO winnerGrid FROM cast(OlympicWinners, < LastName: string, elapsedTime: double, event:string> [x=1996:2008,1000,0] )
show(winnerGrid)

--stop-query-logging


--cleanup

remove(B)
remove(test)
remove(products)
remove(product_null)
remove(product_dflt)
remove(m4x4_first)
remove(m4x4_second)
remove(m4x4_missing)
remove(D)
remove(A)
remove(arrayB)
remove(open)
remove(default_1)
remove(default_2)
remove(OlympicWinners)
remove(event)
remove(year)
remove(person)
remove(country)
remove(time)
remove(winnersFlat)
remove(winnerGrid)
