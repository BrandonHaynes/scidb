<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<refentry id="renameOperator">
  <refnamediv>
    <refname>rename</refname>

    <refpurpose><indexterm>
        <primary>arrays</primary>

        <secondary>renaming</secondary>
      </indexterm><indexterm>
        <primary>rename</primary>
      </indexterm>Change array name.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>rename(<replaceable>named_array</replaceable>,<replaceable>new_array</replaceable>);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The AFL rename operator works like the AQL statement SELECT * INTO
    except that the old array name can be reused immediately with the rename
    operator.</para>

    <para>The rename operator is akin to using the Unix <literal>mv</literal>
    (move) command, whereas SELECT * INTO is akin to the Unix
    <literal>cp</literal> (copy) command. The argument
    <replaceable>named_array</replaceable> must be an array that was
    previously created and stored in the SciDB namespace.</para>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <informalexample>
      <para>Create an array named source, show its name and schema, rename it,
      and show its new name and schema. Note that the array ID remains the
      same.<programlisting language="test">--afl store(build(&lt;val:double&gt;[i=0:9,10,0],1),source); --show-output=no
--afl list('arrays'); --output-format=csv --show-output-in-test-file=no
--afl rename(source,target); --show-output=no
--afl list('arrays'); --output-format=csv --show-output-in-test-file=no
--afl remove(target); --show-query=no --show-output=no
</programlisting></para>
    </informalexample>

    <informalexample>
      <para>Unlike many operators, rename does not create a new array version;
      rather it renames all existing versions of the specified array.</para>

      <procedure>
        <step>
          <para>Create several versions of an array.<programlisting
          language="test">--afl store(build(&lt;val:int64&gt; [i=0:3,4,0,j=0:1,2,0],i*4+j),A); --output-format=dense --chunkify=yes
--afl store(build(A,i*3+j),A); --output-format=dense --chunkify=yes
--afl store(build(A,i*2+j+1),A); --output-format=dense --chunkify=yes</programlisting></para>
        </step>

        <step>
          <para>Show the details of all the versions for array <emphasis
          role="bold">A</emphasis>.<programlisting language="test">--afl list('arrays',true); --output-format=csv --show-output-in-test-file=no</programlisting></para>
        </step>

        <step>
          <para>Rename array <emphasis
          role="bold">A</emphasis>.<programlisting language="test">--afl rename(A,Octagon); --show-output=no
--afl list('arrays',true); --output-format=csv --show-output-in-test-file=no</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
