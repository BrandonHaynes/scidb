<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<chapter id="macros">
  <title>Macros</title>

  <para><indexterm>
      <primary>macros</primary>
    </indexterm><indexterm>
      <primary>modules</primary>
    </indexterm>This version of SciDB includes some experimental
  functionality. We may expand this functionality in future versions.
  Conceptually, this functionality resembles the macro facility offered by the
  C preprocessor, <code>cpp</code>.</para>

  <para>This feature allows a user to create what amount to subroutines: a
  mapping from a name and parameter list to an expression body. The query
  processor will recognize an application of the macro within a query and
  expand the macro inline.</para>

  <para>This functionality consists of the following pieces:<itemizedlist>
      <listitem>
        <para><emphasis>macro</emphasis>: an entity that gets expanded before
        query execution. Wherever the name of the macro is found in the query,
        it is replaced by the body of the macro. There are two kinds of
        macros:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>system macro</emphasis>: a macro included in SciDB
            and automatically loaded whenever you start the SciDB
            cluster.</para>
          </listitem>

          <listitem>
            <para><emphasis>user-defined macro</emphasis>: a macro available
            only if it is part of a module explicitly loaded by you or by some
            other user.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>module</emphasis>: a collection of user-defined
        macros. A module is a text file, and only one module can be loaded
        into SciDB at a time. If you load two modules, the macros defined in
        the first module become unavailable as soon as you load the second
        module.</para>
      </listitem>
    </itemizedlist></para>

  <para>A listing of several useful macros can be found in <xref
  linkend="appendixMacros"/>.</para>

  <section>
    <title>Macro Syntax</title>

    <para>The current syntax is as follows:<programlisting>macro-definition  ::= <emphasis>macro-name</emphasis><emphasis
          role="bold"> (</emphasis> <emphasis>macro-parameters</emphasis><emphasis
          role="bold"> ) = </emphasis><emphasis>macro-body</emphasis> 
                      [<emphasis role="bold"> WHERE { </emphasis><emphasis>macro-definitions </emphasis><emphasis
          role="bold">}</emphasis> ]</programlisting>where:<itemizedlist>
        <listitem>
          <para><emphasis>macro-name</emphasis> is an identifier.</para>
        </listitem>

        <listitem>
          <para><emphasis>macro-parameters</emphasis> is a (possibly empty)
          comma-separated list of distinct identifiers.</para>
        </listitem>

        <listitem>
          <para><emphasis>macro-body</emphasis> is an AFL query that may refer
          by name to both the macro's parameters and also any locally bound
          helper macros defined in the optional <code>where</code> clause.
          Such nested macros are visible only within the enclosing macro's
          body.</para>
        </listitem>

        <listitem>
          <para><emphasis>macro-definitions</emphasis> is a (possibly empty)
          semicolon-separated list of macro definitions.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section id="macroUsage">
    <title>Macro Usage</title>

    <para>You provide macro definitions in a text file (called a
    <emphasis>module</emphasis>) that is accessible to the coordinator
    instance. The module may include comments formatted in any of three ways:
    Postgres-style line (<code><code>--</code>)</code>, C-style (//), and
    block (<code><code>/* ... */</code></code>).</para>

    <para>You then load the contents of the text file into SciDB using the
    operator <code>load_module()</code>. It takes one argument: the pathname
    of a text file containing the macros. SciDB parses its contents, loads
    them into memory, and makes them available for subsequent queries.</para>

    <para>For example, if you have all of your macros in <emphasis
    role="bold">/home/user1/scidb/expansion.txt</emphasis>, you would run the
    following query to load the contents into SciDB:<programlisting>$ iquery -aq "load_module('/home/user1/scidb/expansion.txt')"</programlisting></para>

    <para>Note the following: <itemizedlist>
        <listitem>
          <para>The contents stay in memory until you restart SciDB, whereupon
          you will need to reload them.</para>
        </listitem>

        <listitem>
          <para>Once loaded, the macros become globally available to all
          subsequent queries evaluated on the SciDB cluster.</para>
        </listitem>

        <listitem>
          <para>Any subsequent call of <code>load_module </code>invalidates
          previously loaded user-defined macros, even if the particular macro
          is not defined in the newly loaded file.</para>
        </listitem>

        <listitem>
          <para>Macros are looked up with a case sensitive searchâ€”the name
          must match exactly for the macro to be expanded.</para>
        </listitem>

        <listitem>
          <para>In any query, inline expansion of macros occurs before the
          query is evaluated by the SciDB query parser. This means that a
          macro whose name matches the name of some other entity will
          effectively hide the other entity, preventing the query processor
          from ever invoking it. For example, you should not create a macro
          called <code>filter</code> because such a macro would prevent you
          from ever invoking the native operator called <code>filter</code>.
          Any macro name should not match the name of any of the
          following:</para>

          <itemizedlist>
            <listitem>
              <para>Native operators</para>
            </listitem>

            <listitem>
              <para>User-defined operators</para>
            </listitem>

            <listitem>
              <para>Native functions</para>
            </listitem>

            <listitem>
              <para>User-defined functions</para>
            </listitem>

            <listitem>
              <para>Native aggregates</para>
            </listitem>

            <listitem>
              <para>User-defined aggregates</para>
            </listitem>

            <listitem>
              <para>Native datatypes</para>
            </listitem>

            <listitem>
              <para>System macros</para>
            </listitem>

            <listitem>
              <para>Other user-defined macros</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist></para>

    <para>Caveats (attempting any of these will generate errors):<itemizedlist>
        <listitem>
          <para>Do not define a recursive macro.</para>
        </listitem>

        <listitem>
          <para>Do not define two macros with the same name in the same
          scope.</para>
        </listitem>

        <listitem>
          <para>Do not apply a macro to more or fewer arguments than the macro
          has parameters.</para>
        </listitem>
      </itemizedlist></para>

    <para>You can list the currently available macros with the following AFL
    syntax:</para>

    <programlisting>list('macros');</programlisting>

    <para>For more information, see <xref linkend="listOperator"/>.</para>
  </section>

  <section id="systemMacros">
    <title>System Macros</title>

    <para>SciDB includes some system-defined macros -- macros that are
    automatically loaded whenever the SciDB cluster starts. They include
    macros for operators and functions. The system-defined macros for
    operators are:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">op_count(</emphasis><emphasis> array
        </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the number of non-empty cells in
        <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_sum(</emphasis><emphasis> array,
        attribute </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the sum of values of <emphasis>attribute</emphasis>
        within <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_avg(</emphasis><emphasis> array,
        attribute </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the arithmetic mean of values of
        <emphasis>attribute</emphasis> within
        <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_stdev(</emphasis><emphasis> array,
        attribute </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the standard deviation of values of
        <emphasis>attribute</emphasis> within
        <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_min(</emphasis><emphasis> array,
        attribute </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the minimum value of <emphasis>attribute</emphasis>
        within <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_max(</emphasis><emphasis> array,
        attribute </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the maximum value of <emphasis>attribute</emphasis>
        within <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_range(</emphasis><emphasis> array,
        attribute </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the smallest value, the largest value, and their
        difference (maximum - minimum) of <emphasis>attribute</emphasis>
        within <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_distinct_count (</emphasis><emphasis>
        array, attribute </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns the exact count of distinct values of
        <emphasis>attribute</emphasis> within
        <emphasis>array</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">op_now(</emphasis><emphasis>
        </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns a one-dimensional, one-cell array with the current local
        data-and-time, with timezone offset.</para>
      </listitem>
    </itemizedlist>

    <para>The system macros for functions are:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">func_max(</emphasis><emphasis> first,
        second </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns <emphasis>first</emphasis> or
        <emphasis>second</emphasis>, whichever is larger.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">func_min(</emphasis><emphasis> first,
        second </emphasis><emphasis role="bold">)</emphasis></para>

        <para>Returns <emphasis>first</emphasis> or
        <emphasis>second</emphasis>, whichever is smaller.</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>The current version of SciDB includes some other system macros,
      which you can detect with the list('macros') AFL operation. These other
      system macros -- those that do not appear in the preceding list -- are
      intentionally undocumented and should not be used.</para>
    </note>
  </section>

  <section>
    <title>Macro Examples</title>

    <para>The following example provides a macro that computes the Euclidean
    distance between the points &lt;x1,y1&gt; and
    &lt;x2,y2&gt;.<programlisting>distance(x1,y1,x2,y2) = sqrt(sq(x2 - x1) + sq(y2 - y1)) where
{
    sq(x) = pow(x,2)   -- the square of the scalar "x"
}</programlisting></para>

    <para>Notice here that <code>sq</code> is an example of a nested macroâ€”its
    definition is not visible anywhere else.</para>

    <para>Assuming this macro is specified in a module, and also that the
    module is loaded into SciDB, you could then run a query like the
    following:<programlisting>$ iquery -aq "filter(project(apply(join(A,B), dist, distance(A.x, A.y, B.x, B.y)),dist),dist &lt; 6)"</programlisting><screen>{i,j} dist
{0,0} 1
{0,1} 4.24264
{0,3} 3.16228
{1,0} 1.41421
{1,2} 3
{1,3} 4.12311
{2,0} 2.23607
{2,1} 3
</screen></para>

    <para><indexterm>
        <primary>chunks</primary>

        <secondary>analyzing chunk size</secondary>
      </indexterm><indexterm>
        <primary>chunk map</primary>
      </indexterm>The following example illustrates a macro that analyzes the
    chunks for your SciDB cluster. Once you have loaded the module, you can
    then access the query as follows:<programlisting>$ iquery -aq "chunk_skew()"</programlisting><screen>{iid,aid} name,nchunks,min_ccnt,avg_ccnt,max_ccnt,total_cnt
{0,23} 'big2@1',3,100,100,100,300
{0,25} 'big3@1',25,1000,1000,1000,25000
{1,23} 'big2@1',3,100,100,100,300
{1,25} 'big3@1',25,1000,1000,1000,25000
{2,23} 'big2@1',2,100,100,100,200
{2,25} 'big3@1',25,1000,1000,1000,25000
{3,23} 'big2@1',2,100,100,100,200
{3,25} 'big3@1',25,1000,1000,1000,25000
</screen></para>

    <para>The <emphasis role="bold">map</emphasis> macro is a shortcut for the
    oft-used <emphasis role="bold">project(apply(...))</emphasis>
    construction.<programlisting>/** Apply 'expression' to each element of the 'array'. **/
map(array,expression,name) = project(apply(array,name,expression),name);</programlisting></para>

    <para>The center macro is useful for centering the columns of a matrix.
    After you load the module, run the following queries:</para>

    <para><programlisting>$ iquery "store(build(&lt;val:double&gt;[row=1:5,5,0,col=1:5,5,0],row),M)"</programlisting><screen>[
[(1),(1),(1),(1),(1)],
[(2),(2),(2),(2),(2)],
[(3),(3),(3),(3),(3)],
[(4),(4),(4),(4),(4)],
[(5),(5),(5),(5),(5)]
]</screen><programlisting>$ iquery "center(M,val,col)"</programlisting><screen>[
[(-2),(-2),(-2),(-2),(-2)],
[(-1),(-1),(-1),(-1),(-1)],
[(0),(0),(0),(0),(0)],
[(1),(1),(1),(1),(1)],
[(2),(2),(2),(2),(2)]
]</screen></para>

    <para>The source for these macros and others is included in <xref
    linkend="appendixMacros"/></para>
  </section>
</chapter>
