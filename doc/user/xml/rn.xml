<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % myents SYSTEM "scidb_ug.ent">
%myents;
]>
<preface id="releaseNotes">
  <title id="rn_title">Release Notes</title>

  <para>These release notes apply to version 14.12 of SciDB; they cover all
  features and changes since version 14.8 of:<itemizedlist>
      <listitem>
        <para>SciDB Community Edition (CE)</para>
      </listitem>

      <listitem>
        <para>SciDB Enterprise Edition (EE)</para>
      </listitem>

      <listitem>
        <para>Paradigm4 Labs (P4Labs), which is a collection of external tools
        (such as SciDB-R) maintained in the form of GitHub
        repositories.</para>
      </listitem>
    </itemizedlist></para>

  <para>New features and important bug fixes are described in Sections 2, 3,
  and 4. Feature changes made in these releases and advance notice of changes
  planned for the next release (R15.3) are discussed in Section 5. Known
  limitations are noted in Section 6.</para>

  <section>
    <title>Supported Operating Systems</title>

    <para>SciDB 14.12 supports these platforms: Ubuntu 12.04 and 14.04, RHEL
    6, and CentOS 6.</para>
  </section>

  <section id="SciDB_ReleaseNotes">
    <title>Community Edition Features and Changes</title>

    <para>Version 14.12 includes the following features and changes made since
    SciDB 14.8: <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Supported Platforms:</emphasis> SciDB
          now supports Ubuntu 14.04, as well as Ubuntu 12.04, RHEL 6, and
          CentOS 6.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Storage Format:</emphasis> The database
          file format for SciDB 14.12 differs from that of SciDB 14.8.
          Existing 14.8 databases must be saved and reloaded into
          14.12.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Installation changes:</emphasis>
          Previous versions (14.3 and 14.8) included a script to help you
          install without root privileges -- on CentOS/RHEL only. However, we
          are not aware of anyone actively using that script, so in release
          14.12, it is not supported. If you need such a script, contact us at
          support@paradigm4.com.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Improved load, input, and save:
          </emphasis>SciDB 14.12 includes these improvements to load, input,
          and save functionality:<itemizedlist>
              <listitem>
                <para>Added native support for CSV data (comma-separated
                value). Previous versions supported CSV format only through
                utilities external to the SciDB engine. For example, loading
                CSV data required an external CSV-to-SciDB conversion before
                invoking the load() operator. With version 14.12, the load(),
                input(), and save() operators support CSV format directly.
                That is, "CSV' is an accepted value of the
                <emphasis>format</emphasis> parameter of load(), input(), and
                save().</para>
              </listitem>

              <listitem>
                <para>Extended support for TSV data (tab-separated values).
                With version 14.12, the load(), input(), and save() operators
                support TSV format. That is, "TSV' is an accepted value of the
                <emphasis>format</emphasis> parameter of load(), input(), and
                save().</para>
              </listitem>

              <listitem>
                <para>The load() and input() operators now include the
                <emphasis>isStrict</emphasis> Boolean parameter. (See the item
                about collision handling.)</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Changes to collision handling:
          </emphasis>In 14.8 and earlier versions, some operators would handle
          collisions unhelpfully. For example, if a collision occurred during
          a redimension() without synthetic dimension, SciDB would report no
          warning and would arbitrarily choose one of the candidate cells to
          include in the result. The input() and load() operators could be
          subject to similar problems because neither input() nor load()
          checked for duplicate data. A closely related issue was that neither
          input() nor load() prohibited out-of-order data.</para>

          <para>SciDB 14.12 addresses these issues as follows.</para>

          <para><itemizedlist>
              <listitem>
                <para>The redimension() operator now includes the
                <emphasis>isStrict</emphasis> Boolean parameter. If true, this
                parameter forces the operator to handle collisions more
                gracefully: if a collision is detected and no synthetic
                dimension is available, the operation will fail and geneate an
                error. If <emphasis>isStrict</emphasis> is false,
                redimension() behaves as it did in 14.8. By default, the
                parameter is false.</para>
              </listitem>

              <listitem>
                <para>The load() and input() operators now include the
                <emphasis>isStrict</emphasis> Boolean parameter. If true, this
                parameter has two effects. First, it restricts the incoming
                data to contain no "out-of-order" cell values, where order is
                row-major as defined by the left-to-right declaration of
                dimensions in the array schema. Second, it disallows
                collisions. If the incoming data violates either of these
                restrictions, the operator will fail. If
                <emphasis>isStrict</emphasis> is false, load() or input()
                behaves as it did in 14.8. By default, the parameter is
                false.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Changes to configuration parameters:
          </emphasis>The tmp_path parameter has been removed. SciDB now stores
          temporary data the same directory as your production data, in a
          subdirectory called /tmp.</para>

          <para>Each SciDB instance maintains two queues: a "send" queue for
          array data awaiting transmission to other instances, and a "receive"
          queue for array data arriving from other instances. Four new
          configuration parameters apply:</para>

          <para><itemizedlist>
              <listitem>
                <para>The replication_send_queue_size parameter sets the
                maximum size -- in number of chunks -- of the send queue for
                each instance. The default value is 32.</para>
              </listitem>

              <listitem>
                <para>The replication_receive_queue_size parameter sets the
                maximum size -- in number of chunks -- of the receive queue
                for each instance. The default value is 16.</para>
              </listitem>

              <listitem>
                <para>The sg_send_queue_size parameter limits how much of a
                SciDB instance's send queue can be occupied by the chunks of
                an individual query. The default value is 16 chunks.</para>
              </listitem>

              <listitem>
                <para>The sg_receive_queue_size parameter limits how much of a
                SciDB instance's receive queue can be occupied by the chunks
                of an individual query. The default value is 8 chunks.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Improved Chunk-Length
          Calculation:</emphasis> Version 14.8 included an external utility to
          recommend values of the chunk-length parameter in dimension
          specifications. With version 14.12, that functionality is supported
          natively via extensions to the CREATE ARRAY Syntax. For more
          information, see <xref linkend="createArrayUsingClause"/>. The
          external utility is deprecated.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Changed operators: </emphasis>SciDB
          14.12 includes these changes and additions to
          operators:<itemizedlist>
              <listitem>
                <para>Relaxed restrictions on binary operators cross_join(),
                join(), and merge(). In 14.8 and earlier versions, these
                operators would work only if each pair of to-be-matched
                dimensions had the same chunk size and chunk overlap. As of
                14.12, that restriction is lifted.</para>
              </listitem>

              <listitem>
                <para>The sort() operator has been reimplemented as a true
                distributed sort, so its scalability is significantly
                improved.</para>
              </listitem>

              <listitem>
                <para>The scan() operator handles unbounded arrays
                differently. In 14.8 and earlier versions, scan(A) -- where A
                is an unbounded array -- would produce a bounded result array.
                In 14.12, the result of scan(A) will be unbounded. Some
                seemingly unrelated operators will be affected because scan()
                is used to implement them. In the simplest case, the problem
                can arise when the implementation of operator x(A) includes
                the composition y(scan(A)), A is unbounded, and y() requires
                bounded arrays. In previous versions, this would work because
                regardless of input, the output of scan(A) was always bounded,
                but in 14.12, such a query will produce unpredictable results.
                Operators subject to this behavior include gesvd(), gemm(),
                spgemm(), pearson(), spearman(), xgrid(), and quantile(). When
                using these operators on unbounded arrays, you should rewrite
                your queries to wrap an unbounded array A with
                scan(A,true).</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Documentation changes:</emphasis> For
          version 14.8, Paradigm4 published a single unwieldy document
          encompassing reference material, installation instructions, release
          notes, and expository overview material. As of 14.12, the SciDB
          docset includes one book for reference and release notes, one book
          for installation material, and a set of expository material to be
          made available on line. Unless otherwise noted, the features
          described in the docset apply to both the Community Edition and the
          Enterprise Edition.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section id="P4_ReleaseNotes">
    <title>Enterprise Edition Features and Changes</title>

    <para>Version 14.12 includes all the new features of the Community Edition
    release 14.12.</para>
  </section>

  <section>
    <title>Paradigm4 Labs Features and Changes</title>

    <para>We make available a collection of external tools in the form of
    GitHub repositories at <ulink
    url="http://github.com/paradigm4">http://github.com/paradigm4</ulink>.</para>
  </section>

  <section>
    <title>Deprecation Notes</title>

    <para>This section lists important feature changes made in 14.12, and
    changes anticipated in future releases. For each change, we also identify
    in which the release we provided deprecation notice.</para>

    <informaltable>
      <tgroup cols="4">
        <colspec colname="_1" colwidth="61*"/>

        <colspec colname="_2" colwidth="15*"/>

        <colspec colname="_3" colwidth="15*"/>

        <colspec colname="_4" colwidth="9*"/>

        <thead>
          <row>
            <entry>Functionality Change</entry>

            <entry>Deprecation Notice</entry>

            <entry>Removal Effective</entry>

            <entry>Edition</entry>
          </row>

          <row>
            <entry align="center" nameend="_4" namest="_1"><emphasis>Changes
            made in 14.12</emphasis></entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>The operators <command>adddim()</command> and
            <command>deldim()</command> have been removed. Use
            <command>redimension()</command> or <command>reshape()</command>
            instead. For example, <command>adddim(A,d)</command> can be
            rewritten as <command>redimension(apply(A, d,
            0),&lt;</command><emphasis>attribute_list_of_A</emphasis><command>&gt;[d=0:0,1,0,</command><emphasis>dimension_list_of_A</emphasis><command>&gt;)</command>.</entry>

            <entry>14.3</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>In previous versions, the "use flag' for the
            <command>pearson()</command> operator had five potential values:
            everything, all.obs, complete.obs, nan.or.complete, and
            pairwise.complete.obs. Four of these flag values have been
            removed. The only flag value that remains is
            pairwise.complete.obs.</entry>

            <entry>14.8</entry>

            <entry>14.12</entry>

            <entry>EE</entry>
          </row>

          <row>
            <entry>Support for octal values in array literals and
            dense-load-format (DLF) files -- also known as SciDB-formatted
            text files -- has been removed. This affects the
            <command>build()</command>, <command>input()</command>, and
            <command>load()</command> operators. In previous versions, if an
            array literal or DLF file included a value of an int64 attribute
            and that value included a leading zero, the value would be
            interpreted as an octal number. So '007' would yield the decimal
            value 7, '017' would yield 15, and '018' would generate an error
            because 8 is not a valid octal numeral. As of 14.12, such numbers
            are interpreted as decimal numbers, so '007', '017', and '018'
            will yield 7, 17, and 18 respectively.</entry>

            <entry>14.8</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <informaltable>
      <tgroup cols="3">
        <colspec colname="_1" colwidth="74*"/>

        <colspec colname="_2" colwidth="15*"/>

        <colspec colname="_4" colwidth="9*"/>

        <thead>
          <row>
            <entry>Functionality Change</entry>

            <entry>Deprecation Notice</entry>

            <entry>Edition</entry>
          </row>

          <row>
            <entry align="center" nameend="_4" namest="_1"><emphasis>Expected
            changes in the next release (R15.3)</emphasis></entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Future versions will disallow the use of "impure" operators
            inside other operators. By impure, we mean operators that have
            side effects. The following operators fall into this class, and
            thus should be used only at the top-level of a query.<itemizedlist>
                <listitem>
                  <para><command>create_array()</command>,
                  <command>store()</command>, <command>load()</command>,
                  <command>rename()</command>, <command>remove()</command>,
                  <command>remove_versions()</command>, and
                  <command>save()</command>, which modify arrays.</para>
                </listitem>

                <listitem>
                  <para><command>load_library()</command>,
                  <command>unload_library()</command>,
                  <command>load_module()</command>, and
                  <command>setopt()</command>, which modify how queries
                  execute.</para>
                </listitem>
              </itemizedlist></entry>

            <entry>14.3</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>Future versions will enforce case sensitivity for all
            identifiers, including operators, functions, types, attribute
            names, dimensions, and array names.</entry>

            <entry>14.3</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operator <command>join()</command> will be removed from
            a future release. Use <command>cross_join()</command>
            instead.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The functions <command>fisher_test_p_value</command> and
            <command>fisher_test_odds_ratio</command> will be removed from a
            future release. Use<ulink
            url="https://github.com/Paradigm4/superfunpack">
            https://github.com/Paradigm4/superfunpack</ulink> instead.</entry>

            <entry>14.12</entry>

            <entry>EE</entry>
          </row>

          <row>
            <entry>In release 14.12, the default value of the isStrict flag
            (of the <command>input()</command>, <command>store()</command>,
            and <command>redimension()</command> operators) is false. In a
            future release, the default value will be true.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operators <command>thin()</command> and
            <command>lookup()</command> will be removed from a future release.
            Workarounds will not be provided. If you need these operators,
            contact <email>support@paradigm4.com</email>.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operator <command>allversions()</command> will be
            removed from a future release. To see all version of an array A,
            use versions(A). To see all versions of all arrays, use
            list('arrays',true). You can use redimension() and merge() to
            establish the same shape as allversions().</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operator <command>analyze()</command> will be removed.
            The workaround for <command>analyze(A)</command> is to use
            <command>aggregate(A, sum(a), max(a), min(a),
            approxdc(a))</command> for each attribute you want to
            analyze.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The function <command>approxDC()</command> will be renamed
            to <command>approxdc()</command>. The automatically generated name
            for the attribute created by the function will also use lowercase
            letters.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operator <command>attribute_rename()</command> will be
            removed. The workaround is to use
            <command>project(apply())</command> for each attribute you want to
            analyze.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operator <command>concat()</command> will be removed.
            The workaround is to use a combination of
            <command>merge(A)</command> and
            <command>redimension()</command>.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operator <command>normalize()</command> will be
            removed. The workaround is <command>apply(aggregate(apply(A, sq,
            a*a), sum(sq)), r, sqrt(sq))</command>.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The operator <command>reverse()</command> will be removed.
            The workaround is to use <command>redimension( apply()
            )</command>.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The utility script <command>csv2scidb</command> will be
            removed because the <command>load()</command> operator now
            supports CSV files natively.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The utility script <command>loadcsv.py</command> will be
            removed because its capabilities are now natively supported by the
            SciDB engine.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>The utility script
            <command>calculate_chunk_length.py</command> will be removed
            because its capabilities are now natively supported by the
            <command>CREATE ARRAY</command> syntax.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>

          <row>
            <entry>In 14.12 and earlier releases, attributes were by default
            NOT NULL. In a future version, the default will be NULL.</entry>

            <entry>14.12</entry>

            <entry>CE</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section>
    <title>Known Limitations</title>

    <para><itemizedlist>
        <listitem>
          <para>The operand of the <command role="bold">uniq()</command>
          operator must be a sorted array; otherwise, <command
          role="bold">uniq()</command> will return erroneous results.</para>
        </listitem>

        <listitem>
          <para>The <command role="bold">dimensions()</command> operator
          sometimes reports incorrect start, length, low and high values for
          unbounded arrays. Correct values may be obtained using <command
          role="bold">apply()</command> to translate a dimension into an
          attribute, followed by a min / max aggregate.</para>
        </listitem>

        <listitem>
          <para>Within any dimension, the difference between the largest and
          the smallest dimension value must not exceed
          (2<superscript>61</superscript> - 1).</para>
        </listitem>

        <listitem>
          <para>The <command>gemm()</command> and <command>gesvd()</command>
          operators work only on arrays with chunk lengths between 32 and
          1024. (Other chunk lengths are flagged because
          <command>gemm()</command>and <command>gesvd()</command> are
          inefficient outside the supported range.) Furthermore, only one
          concurrent user can be running a query with either of these
          operators.</para>
        </listitem>

        <listitem>
          <para>Do not use the <command role="bold">adddim()</command> and
          <command role="bold">deldim()</command> operators. Use
          <command>redimension()</command> or <command>reshape()</command>
          instead.</para>
        </listitem>

        <listitem>
          <para>Whenever a query requires filtering on dimension values,
          <command role="bold">filter()</command> may not be the fastest
          approach. In the vast majority of cases, <command
          role="bold">between()</command>, <command
          role="bold">subarray()</command>, <command
          role="bold">cross_join()</command>, or a combination of them,
          performs better. For more information about using <command
          role="bold">cross_join()</command> as a dimensions filter, see
          <ulink
          url="http://www.scidb.org/forum/viewtopic.php?f=18&amp;t=1204">http://www.scidb.org/forum/viewtopic.php?f=18&amp;t=1204</ulink>.</para>
        </listitem>

        <listitem>
          <para>The <command role="bold">aggregate()</command> operator works
          best when it produces a 1-dimensional result array. To perform
          aggregations that produce arrays with more than one dimension, use
          <command role="bold">redimension()</command>.</para>
        </listitem>

        <listitem>
          <para>A known bug can produce unpredictable results if you use
          uppercase letters in the names of attributes or dimensions. Until
          this bug is fixed, we recommend that you use only lowercase letters
          in attribute and dimension names.</para>
        </listitem>
      </itemizedlist></para>
  </section>
</preface>
