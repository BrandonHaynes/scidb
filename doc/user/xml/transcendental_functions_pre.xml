<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<refentry id="trigonometricFunctions">
  <refnamediv>
    <refname>Transcendental functions</refname>

    <refpurpose><indexterm>
        <primary>trigonometric functions</primary>
      </indexterm><indexterm>
        <primary>logarithmic functions</primary>
      </indexterm>Perform mathematical functions in a query
    expression</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis><command>SELECT</command> <replaceable>expression1</replaceable> <command>FROM</command> <replaceable>array</replaceable> <command>WHERE</command> <replaceable>expression2</replaceable>;</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>These functions perform non-algebraic functions including
    trigonometry and logarithmic functions.</para>

    <informaltable frame="all">
      <?dbfo keep-together="auto" ?>

      <tgroup cols="4">
        <colspec colname="c1" colwidth="10*"/>

        <colspec colname="c2" colwidth="30*"/>

        <colspec colname="c3" colwidth="15*"/>

        <colspec colname="cgen1" colwidth="15*"/>

        <thead>
          <row>
            <entry>Function Name</entry>

            <entry>Description</entry>

            <entry>Syntax</entry>

            <entry>Datatypes</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>acos</entry>

            <entry><indexterm>
                <primary>inverse cosine</primary>
              </indexterm>Inverse (arc) cosine in radians</entry>

            <entry>acos(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>asin</entry>

            <entry><indexterm>
                <primary>inverse sine</primary>
              </indexterm>Inverse (arc) sine in radians</entry>

            <entry>asin(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>atan</entry>

            <entry><indexterm>
                <primary>inverse tangent</primary>
              </indexterm>Inverse (arc) tangent in radians</entry>

            <entry>atan(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>cos</entry>

            <entry>Cosine (input in radians)</entry>

            <entry>cos(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>exp</entry>

            <entry>Exponential</entry>

            <entry>exp(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>log</entry>

            <entry>Base-<emphasis role="italic">e</emphasis> logarithm</entry>

            <entry>log(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>log10</entry>

            <entry>Base-10 logarithm</entry>

            <entry>log10(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>sin</entry>

            <entry>Sine (input in radians)</entry>

            <entry>sin(scalar)</entry>

            <entry>double,float</entry>
          </row>

          <row>
            <entry>tan</entry>

            <entry>Tangent (input in radians)</entry>

            <entry>tan(scalar)</entry>

            <entry>double,float</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <informalexample>
      <para>This example calculates the sine, cosine, and tangent of a set of
      values.</para>

      <procedure>
        <step>
          <para>Create a 1-dimensional array, <literal>trig_1</literal>, and
          store values of 0, <symbol role="symbolfont">π</symbol>/3, 2<symbol
          role="symbolfont">π</symbol>/3, <symbol
          role="symbolfont">π</symbol>, 4/3<symbol
          role="symbolfont">π</symbol>, and 5/3<symbol
          role="symbolfont">π</symbol>.<programlisting language="test">--afl create array trig_1 &lt;val:float&gt;[x=0:5,6,0]; --show-query=no --show-output=no
--afl store(build(trig_1,(2.0/3.0)*acos(0)*x),trig_1); --output-format=dense</programlisting></para>
        </step>

        <step>
          <para>Calculate the trigonometric functions for array
          <literal>values</literal>.<programlisting language="test">--aql select cos(val) from trig_1; --output-format=dense
--aql select sin(val) from trig_1; --output-format=dense
--aql select tan(val) from trig_1; --output-format=dense
</programlisting></para>
        </step>
      </procedure>
    </informalexample>

    <informalexample>
      <para>This example calculates the arcsine, arccosine, and arctangent of
      a set of values.</para>

      <procedure>
        <step>
          <para>Create a 1-dimensional array, <literal>trig_2</literal>, and
          store values between 0 and 1.<programlisting language="test">--afl create array trig_2 &lt;val:float&gt;[x=0:5,6,0]; --show-query=no --show-output=no
--afl store(build(trig_2,1.0/(x+1)),trig_2); --output-format=dense</programlisting></para>
        </step>

        <step>
          <para>Calculate the inverse trigonometric functions for array
          <literal>values</literal>.<programlisting language="test">--aql select acos(val) from trig_2; --output-format=dense
--aql select asin(val) from trig_2; --output-format=dense
--aql select atan(val) from trig_2; --output-format=dense
</programlisting></para>
        </step>
      </procedure>
    </informalexample>

    <informalexample>
      <para>This example calculates the exp, log, and natural log of a set of
      values.</para>

      <procedure>
        <step>
          <para>Calculate the exponential function
          (<emphasis>e</emphasis><superscript>x</superscript>) for a set of
          values.<programlisting language="test">--afl create array logs &lt;val:float&gt;[x=0:5,6,0]; --show-query=no --show-output=no
--afl store(build(logs,(1.7*(x+0.01))),logs); --output-format=dense
--aql select exp(val) from logs; --output-format=dense
</programlisting></para>
        </step>

        <step>
          <para>Calculate the log and natural log for a set of
          values.<programlisting language="test">--afl store(build(logs, pow(10,x)),logs); --output-format=dense
--aql select log(val) from logs; --output-format=dense
--aql select log10(val) from logs; --output-format=dense
</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
