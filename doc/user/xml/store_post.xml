<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd">
<refentry id="store">
  <refnamediv>
    <refname>store</refname>

    <refpurpose><indexterm>
        <primary>store</primary>
      </indexterm>Store query output in a SciDB array</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>store(<replaceable>operator</replaceable>(<replaceable>operator_args</replaceable>),<replaceable>named_array</replaceable>);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para><literal>store()</literal> is a write operator, that is, one of the
    AFL operations that can update an array. Each execution of store causes a
    new version of the array to be created. When an array is removed, so are
    all of its versions. The argument <replaceable>named_array</replaceable>
    must be an array that was previously created and stored in the SciDB
    namespace.</para>

    <para><literal>store()</literal> can be used to save the resultant output
    array into an existing/new array. It can also be used to duplicate an
    array (by using the name of the source array in the first parameter and
    target_array in the second parameter).</para>

    <note>
      <para>The AFL store operator provides the same functionality as the AQL
      <code><command>SELECT</command></code> *
      <code><command>INTO</command></code> ...
      <code><command>FROM</command></code> ... statement.</para>
    </note>

    <para><indexterm>
        <primary>storage</primary>

        <secondary>reclaiming</secondary>
      </indexterm>You can also use <literal>store()</literal> to reclaim
    storage space to Linux file system. As you update an array, new versions
    are created, and more space is used to store the array versions. When an
    array is deleted, all the file space is returned to the operating system.
    If, however, you want to keep the array, but do not care about previous
    versions, you can copy the array, and then delete the original.</para>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <informalexample>
      <para>Build and store a 2-dimensional, 1-attribute array of zeros:
      <para><programlisting>AFL% store(build(&lt;val: double&gt;[i=0:2,3,0,j=0:2,3,0],0),zeros_array);  </programlisting> You can create a new array from the existing array's schema,
      store cell values of 1 with a store statement: <para><programlisting>AFL% store(build(zeros_array,1),ones_array);  </programlisting></para></para></para>
    </informalexample>

    <informalexample>
      <para>Build and store a 2-dimensional, 1-attribute array of random
      numbers between 1 and 10: <para><programlisting>AFL% CREATE ARRAY random_array &lt;val:double null&gt;[i=0:3,4,0,j=0:3,4,0];  </programlisting><programlisting>AFL% store(build(random_array,random()%10),random_array);  </programlisting><screen>[
[(1),(8),(0),(1)],
[(3),(5),(7),(3)],
[(9),(9),(2),(7)],
[(0),(8),(3),(3)]
]</screen> You can update the array with a different set of random
      numbers by re-running the store statement: <para><programlisting>AFL% store(build(random_array,random()%10),random_array);  </programlisting><screen>[
[(8),(9),(3),(1)],
[(4),(9),(0),(0)],
[(7),(4),(9),(0)],
[(0),(7),(9),(3)]
]</screen></para></para></para>
    </informalexample>

    <informalexample>
      <para>Remove all versions of an array, except for the current one, to
      reclaim storage.</para>

      <procedure>
        <step>
          <para>Assume you have an array that has several
          versions.<para><programlisting>AFL% aggregate(versions(A),count(*));</programlisting><screen>{i} count
{0} 5
</screen></para></para>
        </step>

        <step>
          <para>Copy <emphasis role="bold">A</emphasis> to a new array,
          <emphasis role="bold">B</emphasis>:<para><programlisting>AFL% store(A,B);  </programlisting></para></para>
        </step>

        <step>
          <para>Remove <emphasis role="bold">A</emphasis>.<para><programlisting>AFL% remove(A);  </programlisting></para></para>
        </step>

        <step>
          <para>Optionally, change the array name back to the
          original.<para><programlisting>AFL% rename(B,A);  </programlisting></para></para>
        </step>

        <step>
          <para>Confirm that now, there is only one version of the
          array.<para><programlisting>AFL% aggregate(versions(A),count(*));</programlisting><screen>{i} count
{0} 1
</screen></para></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
