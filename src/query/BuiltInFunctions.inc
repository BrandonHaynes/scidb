/*
**
* BEGIN_COPYRIGHT
*
* This file is part of SciDB.
* Copyright (C) 2008-2014 SciDB, Inc.
*
* SciDB is free software: you can redistribute it and/or modify
* it under the terms of the AFFERO GNU General Public License as published by
* the Free Software Foundation.
*
* SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
* INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
* NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
* the AFFERO GNU General Public License for the complete license terms.
*
* You should have received a copy of the AFFERO GNU General Public License
* along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
*
* END_COPYRIGHT
*/


/**
 * @file BuiltInFunctions.inc
 *
 * @author roman.simakov@gmail.com
 *
 * Built In scalar function declarations
 */

/**
 * This is a table with type of binary operation and operations and result type
 * 
Type/Op        +          -          *          =          /          %          <          <=         <>         >=         >          not        and        or
TID_INDICATOR                                   TID_BOOL                         TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_CHAR                                        TID_BOOL                         TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_INT8       TID_INT8   TID_INT8   TID_INT16  TID_BOOL   TID_INT8   TID_INT8   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_INT16      TID_INT16  TID_INT16  TID_INT32  TID_BOOL   TID_INT16  TID_INT16  TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_INT32      TID_INT32  TID_INT32  TID_INT64  TID_BOOL   TID_INT32  TID_INT32  TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_INT64      TID_INT64  TID_INT64  TID_INT64  TID_BOOL   TID_INT64  TID_INT64  TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_UINT8      TID_UINT8  TID_INT8   TID_UINT16 TID_BOOL   TID_UINT8  TID_UINT8  TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_UINT16     TID_UINT16 TID_INT16  TID_UINT32 TID_BOOL   TID_UINT16 TID_UINT16 TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_UINT32     TID_UINT32 TID_INT32  TID_UINT64 TID_BOOL   TID_UINT32 TID_UINT32 TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_UINT64     TID_UINT64 TID_INT64  TID_UINT64 TID_BOOL   TID_UINT64 TID_UINT64 TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_FLOAT      TID_FLOAT  TID_FLOAT  TID_FLOAT  TID_BOOL   TID_FLOAT             TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_DOUBLE     TID_DOUBLE TID_DOUBLE TID_DOUBLE TID_BOOL   TID_DOUBLE            TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_BOOL                                        TID_BOOL                         TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_STRING                                      TID_BOOL                         TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL   TID_BOOL
TID_VOID
 *
 *  Below operation declarations is grouped by data type of
 * operation argument with all available operations and converters
 * for this data type.
 */

/* TID_INDICATOR */
//TODO:

/* TID_CHAR */
BINARY_BOP(EQ, TID_CHAR, TID_BOOL, "=", ==, Char, Bool)
BINARY_BOP(LS, TID_CHAR, TID_BOOL, "<", <, Char, Bool)
BINARY_BOP(LSEQ, TID_CHAR, TID_BOOL, "<=", <=, Char, Bool)
BINARY_BOP(NEQ, TID_CHAR, TID_BOOL, "<>", !=, Char, Bool)
BINARY_BOP(GTEQ, TID_CHAR, TID_BOOL, ">=", >=, Char, Bool)
BINARY_BOP(GT, TID_CHAR, TID_BOOL, ">", >, Char, Bool)

CONVERTOR(TID_CHAR, TID_INT8, Char, Int8, 1)
CONVERTOR(TID_CHAR, TID_INT16, Char, Int16, 2)
CONVERTOR(TID_CHAR, TID_INT32, Char, Int32, 3)
CONVERTOR(TID_CHAR, TID_INT64, Char, Int64, 4)
CONVERTOR(TID_CHAR, TID_UINT8, Char, Uint8, 1)
CONVERTOR(TID_CHAR, TID_UINT16, Char, Uint16, 2)
CONVERTOR(TID_CHAR, TID_UINT32, Char, Uint32, 3)
CONVERTOR(TID_CHAR, TID_UINT64, Char, Uint64 ,4)
CONVERTOR(TID_CHAR, TID_FLOAT, Char, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_CHAR, TID_DOUBLE, Char, Double, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_CHAR, TID_BOOL, Char, Bool, TRANSFORM_CONVERSION_COST)
// CONVERTOR(TID_CHAR, TID_BOOL, Char, Bool, TRANSFORM_CONVERSION_COST)

// TID_INT8
BINARY_OP(PLUS, TID_INT8, TID_INT8, "+", +, Int8, Int8)
BINARY_OP(MINUS, TID_INT8, TID_INT8, "-", -, Int8, Int8)
BINARY_OP(MULT, TID_INT8, TID_INT8, "*", *, Int8, Int8)
BINARY_BOP(EQ, TID_INT8, TID_BOOL, "=", ==, Int8, Bool)
DIVISION_OP(DIV, TID_INT8, TID_INT8, "/", /, Int8, Int8)
DIVISION_OP(MOD, TID_INT8, TID_INT8, "%", %, Int8, Int8)
BINARY_BOP(LS, TID_INT8, TID_BOOL, "<", <, Int8, Bool)
BINARY_BOP(LSEQ, TID_INT8, TID_BOOL, "<=", <=, Int8, Bool)
BINARY_BOP(NEQ, TID_INT8, TID_BOOL, "<>", !=, Int8, Bool)
BINARY_BOP(GTEQ, TID_INT8, TID_BOOL, ">=", >=, Int8, Bool)
BINARY_BOP(GT, TID_INT8, TID_BOOL, ">", >, Int8, Bool)

UNARY_OP(UNARU_MINUS, TID_INT8, TID_INT8, "-", -, Int8, Int8)

CONVERTOR(TID_INT8, TID_INT16, Int8, Int16, 2)
CONVERTOR(TID_INT8, TID_INT32, Int8, Int32, 3)
CONVERTOR(TID_INT8, TID_INT64, Int8, Int64, 4)
CONVERTOR(TID_INT8, TID_UINT8, Int8, Uint8, 1)
CONVERTOR(TID_INT8, TID_UINT16, Int8, Uint16, 2)
CONVERTOR(TID_INT8, TID_UINT32, Int8, Uint32, 3)
CONVERTOR(TID_INT8, TID_UINT64, Int8, Uint64, 4)
CONVERTOR(TID_INT8, TID_FLOAT, Int8, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_INT8, TID_DOUBLE, Int8, Double, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_INT8, TID_BOOL, Int8, Bool, TRANSFORM_CONVERSION_COST)

// TID_INT16
BINARY_OP(PLUS, TID_INT16, TID_INT16, "+", +, Int16, Int16)
BINARY_OP(MINUS, TID_INT16, TID_INT16, "-", -, Int16, Int16)
BINARY_OP(MULT, TID_INT16, TID_INT16, "*", *, Int16, Int16)
BINARY_BOP(EQ, TID_INT16, TID_BOOL, "=", ==, Int16, Bool)
DIVISION_OP(DIV, TID_INT16, TID_INT16, "/", /, Int16, Int16)
DIVISION_OP(MOD, TID_INT16, TID_INT16, "%", %, Int16, Int16)
BINARY_BOP(LS, TID_INT16, TID_BOOL, "<", <, Int16, Bool)
BINARY_BOP(LSEQ, TID_INT16, TID_BOOL, "<=", <=, Int16, Bool)
BINARY_BOP(NEQ, TID_INT16, TID_BOOL, "<>", !=, Int16, Bool)
BINARY_BOP(GTEQ, TID_INT16, TID_BOOL, ">=", >=, Int16, Bool)
BINARY_BOP(GT, TID_INT16, TID_BOOL, ">", >, Int16, Bool)

UNARY_OP(UNARU_MINUS, TID_INT16, TID_INT16, "-", -, Int16, Int16)

CONVERTOR(TID_INT16, TID_INT8, Int16, Int8, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_INT16, TID_INT32, Int16, Int32, 2)
CONVERTOR(TID_INT16, TID_INT64, Int16, Int64, 3)
CONVERTOR(TID_INT16, TID_UINT8, Int16, Uint8, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_INT16, TID_UINT16, Int16, Uint16, 1)
CONVERTOR(TID_INT16, TID_UINT32, Int16, Uint32, 2)
CONVERTOR(TID_INT16, TID_UINT64, Int16, Uint64, 3)
CONVERTOR(TID_INT16, TID_FLOAT, Int32, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_INT16, TID_DOUBLE, Int16, Double, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_INT16, TID_BOOL, Int16, Bool, TRANSFORM_CONVERSION_COST)

/* TID_INT32 */
BINARY_OP(PLUS, TID_INT32, TID_INT32, "+", +, Int32, Int32)
BINARY_OP(MINUS, TID_INT32, TID_INT32, "-", -, Int32, Int32)
BINARY_OP(MULT, TID_INT32, TID_INT32, "*", *, Int32, Int32)
BINARY_BOP(EQ, TID_INT32, TID_BOOL, "=", ==, Int32, Bool)
DIVISION_OP(DIV, TID_INT32, TID_INT32, "/", /, Int32, Int32)
DIVISION_OP(MOD, TID_INT32, TID_INT32, "%", %, Int32, Int32)
BINARY_BOP(LS, TID_INT32, TID_BOOL, "<", <, Int32, Bool)
BINARY_BOP(LSEQ, TID_INT32, TID_BOOL, "<=", <=, Int32, Bool)
BINARY_BOP(NEQ, TID_INT32, TID_BOOL, "<>", !=, Int32, Bool)
BINARY_BOP(GTEQ, TID_INT32, TID_BOOL, ">=", >=, Int32, Bool)
BINARY_BOP(GT, TID_INT32, TID_BOOL, ">", >, Int32, Bool)

UNARY_OP(UNARU_MINUS, TID_INT32, TID_INT32, "-", -, Int32, Int32)

CONVERTOR(TID_INT32, TID_INT8, Int32, Int8, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_INT32, TID_INT16, Int32, Int16, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_INT32, TID_INT64, Int32, Int64, 2)
CONVERTOR(TID_INT32, TID_UINT8, Int32, Uint8, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_INT32, TID_UINT16, Int32, Uint16, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_INT32, TID_UINT32, Int32, Uint32, 1)
CONVERTOR(TID_INT32, TID_UINT64, Int32, Uint64, 2)
CONVERTOR(TID_INT32, TID_FLOAT, Int32, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_INT32, TID_DOUBLE, Int32, Double, TRANSFORM_CONVERSION_COST)
// CONVERTOR(TID_INT32, TID_BOOL, Int32, Bool, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_INT32, TID_BOOL, Int32, Bool, TRANSFORM_CONVERSION_COST)

/* TID_INT64 */
BINARY_OP(PLUS, TID_INT64, TID_INT64, "+", +, Int64, Int64)
BINARY_OP(MINUS, TID_INT64, TID_INT64, "-", -, Int64, Int64)
BINARY_OP(MULT, TID_INT64, TID_INT64, "*", *, Int64, Int64)
BINARY_BOP(EQ, TID_INT64, TID_BOOL, "=", ==, Int64, Bool)
DIVISION_OP(DIV, TID_INT64, TID_INT64, "/", /, Int64, Int64)
DIVISION_OP(MOD, TID_INT64, TID_INT64, "%", %, Int64, Int64)
BINARY_BOP(LS, TID_INT64, TID_BOOL, "<", <, Int64, Bool)
BINARY_BOP(LSEQ, TID_INT64, TID_BOOL, "<=", <=, Int64, Bool)
BINARY_BOP(NEQ, TID_INT64, TID_BOOL, "<>", !=, Int64, Bool)
BINARY_BOP(GTEQ, TID_INT64, TID_BOOL, ">=", >=, Int64, Bool)
BINARY_BOP(GT, TID_INT64, TID_BOOL, ">", >, Int64, Bool)

UNARY_OP(UNARU_MINUS, TID_INT64, TID_INT64, "-", -, Int64, Int64)

CONVERTOR(TID_INT64, TID_INT8, Int64, Int8, TRUNCATE_CONVERSION_COST*3)
CONVERTOR(TID_INT64, TID_INT16, Int64, Int16, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_INT64, TID_INT32, Int64, Int32, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_INT64, TID_UINT8, Int64, Uint8, TRUNCATE_CONVERSION_COST*3)
CONVERTOR(TID_INT64, TID_UINT16, Int64, Uint16, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_INT64, TID_UINT32, Int64, Uint32, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_INT64, TID_UINT64, Int64, Uint64, 1)
CONVERTOR(TID_INT64, TID_FLOAT, Int64, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_INT64, TID_DOUBLE, Int64, Double, TRANSFORM_CONVERSION_COST)
// CONVERTOR(TID_INT64, TID_BOOL, Int64, Bool, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_INT64, TID_BOOL, Int64, Bool, TRANSFORM_CONVERSION_COST)

/* TID_DATETIME */
BINARY_OP(MINUS, TID_DATETIME, TID_INT64, "-", -, DateTime, Int64)  // Result is a number of seconds
BINARY_BOP(EQ, TID_DATETIME, TID_BOOL, "=", ==, DateTime, Bool)
BINARY_BOP(LS, TID_DATETIME, TID_BOOL, "<", <, DateTime, Bool)
BINARY_BOP(LSEQ, TID_DATETIME, TID_BOOL, "<=", <=, DateTime, Bool)
BINARY_BOP(NEQ, TID_DATETIME, TID_BOOL, "<>", !=, DateTime, Bool)
BINARY_BOP(GTEQ, TID_DATETIME, TID_BOOL, ">=", >=, DateTime, Bool)
BINARY_BOP(GT, TID_DATETIME, TID_BOOL, ">", >, DateTime, Bool)

UNARY_OP(UNARU_MINUS, TID_DATETIME, TID_DATETIME, "-", -, DateTime, DateTime)

CONVERTOR(TID_DATETIME, TID_INT64, DateTime, Int64, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DATETIME, TID_DOUBLE, DateTime, Double, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_INT64, TID_DATETIME, Int64, DateTime, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_DATETIME, Double, DateTime, EXPLICIT_CONVERSION_COST)

// TID_UINT8
BINARY_OP(PLUS, TID_UINT8, TID_UINT8, "+", +, Uint8, Uint8)
BINARY_OP(MINUS, TID_UINT8, TID_INT8, "-", -, Uint8, Int8)
BINARY_OP(MULT, TID_UINT8, TID_UINT8, "*", *, Uint8, Uint8)
BINARY_BOP(EQ, TID_UINT8, TID_BOOL, "=", ==, Uint8, Bool)
DIVISION_OP(DIV, TID_UINT8, TID_UINT8, "/", /, Uint8, Uint8)
DIVISION_OP(MOD, TID_UINT8, TID_UINT8, "%", %, Uint8, Uint8)
BINARY_BOP(LS, TID_UINT8, TID_BOOL, "<", <, Uint8, Bool)
BINARY_BOP(LSEQ, TID_UINT8, TID_BOOL, "<=", <=, Uint8, Bool)
BINARY_BOP(NEQ, TID_UINT8, TID_BOOL, "<>", !=, Uint8, Bool)
BINARY_BOP(GTEQ, TID_UINT8, TID_BOOL, ">=", >=, Uint8, Bool)
BINARY_BOP(GT, TID_UINT8, TID_BOOL, ">", >, Uint8, Bool)

UNARY_OP(UNARU_MINUS, TID_UINT8, TID_INT8, "-", -, Uint8, Int8)

CONVERTOR(TID_UINT8, TID_UINT16, Uint8, Uint16, 2)
CONVERTOR(TID_UINT8, TID_UINT32, Uint8, Uint32, 3)
CONVERTOR(TID_UINT8, TID_UINT64, Uint8, Uint64, 4)
CONVERTOR(TID_UINT8, TID_INT8, Uint8, Int8, 1)
CONVERTOR(TID_UINT8, TID_INT16, Uint8, Int16, 2)
CONVERTOR(TID_UINT8, TID_INT32, Uint8, Int32, 3)
CONVERTOR(TID_UINT8, TID_INT64, Uint8, Int64, 4)
CONVERTOR(TID_UINT8, TID_FLOAT, Uint8, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_UINT8, TID_DOUBLE, Uint8, Double, TRANSFORM_CONVERSION_COST)
// CONVERTOR(TID_UINT8, TID_BOOL, Uint8, Bool, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_UINT8, TID_BOOL, Uint8, Bool, TRANSFORM_CONVERSION_COST)

// TID_UINT16 
BINARY_OP(PLUS, TID_UINT16, TID_UINT16, "+", +, Uint16, Uint16)
BINARY_OP(MINUS, TID_UINT16, TID_INT16, "-", -, Uint16, Int16)
BINARY_OP(MULT, TID_UINT16, TID_UINT16, "*", *, Uint16, Uint16)
BINARY_BOP(EQ, TID_UINT16, TID_BOOL, "=", ==, Uint16, Bool)
DIVISION_OP(DIV, TID_UINT16, TID_UINT16, "/", /, Uint16, Uint16)
DIVISION_OP(MOD, TID_UINT16, TID_UINT16, "%", %, Uint16, Uint16)
BINARY_BOP(LS, TID_UINT16, TID_BOOL, "<", <, Uint16, Bool)
BINARY_BOP(LSEQ, TID_UINT16, TID_BOOL, "<=", <=, Uint16, Bool)
BINARY_BOP(NEQ, TID_UINT16, TID_BOOL, "<>", !=, Uint16, Bool)
BINARY_BOP(GTEQ, TID_UINT16, TID_BOOL, ">=", >=, Uint16, Bool)
BINARY_BOP(GT, TID_UINT16, TID_BOOL, ">", >, Uint16, Bool)

UNARY_OP(UNARU_MINUS, TID_UINT16, TID_INT16, "-", -, Uint16, Int16)

CONVERTOR(TID_UINT16, TID_UINT8, Uint16, Uint8, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_UINT16, TID_UINT32, Uint16, Uint32, 2)
CONVERTOR(TID_UINT16, TID_UINT64, Uint16, Uint64, 3)
CONVERTOR(TID_UINT16, TID_INT8,  Uint16, Int8, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_UINT16, TID_INT16, Uint16, Int16, 1)
CONVERTOR(TID_UINT16, TID_INT32, Uint16, Int32, 2)
CONVERTOR(TID_UINT16, TID_INT64, Uint16, Int64, 3)
CONVERTOR(TID_UINT16, TID_FLOAT, Uint16, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_UINT16, TID_DOUBLE, Uint16, Double, TRANSFORM_CONVERSION_COST)
// CONVERTOR(TID_UINT16, TID_BOOL, Uint16, Bool, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_UINT16, TID_BOOL, Uint16, Bool, TRANSFORM_CONVERSION_COST)

// TID_UINT32 
BINARY_OP(PLUS, TID_UINT32, TID_UINT32, "+", +, Uint32, Uint32)
BINARY_OP(MINUS, TID_UINT32, TID_INT32, "-", -, Uint32, Int32)
BINARY_OP(MULT, TID_UINT32, TID_UINT32, "*", *, Uint32, Uint32)
BINARY_BOP(EQ, TID_UINT32, TID_BOOL, "=", ==, Uint32, Bool)
DIVISION_OP(DIV, TID_UINT32, TID_UINT32, "/", /, Uint32, Uint32)
DIVISION_OP(MOD, TID_UINT32, TID_UINT32, "%", %, Uint32, Uint32)
BINARY_BOP(LS, TID_UINT32, TID_BOOL, "<", <, Uint32, Bool)
BINARY_BOP(LSEQ, TID_UINT32, TID_BOOL, "<=", <=, Uint32, Bool)
BINARY_BOP(NEQ, TID_UINT32, TID_BOOL, "<>", !=, Uint32, Bool)
BINARY_BOP(GTEQ, TID_UINT32, TID_BOOL, ">=", >=, Uint32, Bool)
BINARY_BOP(GT, TID_UINT32, TID_BOOL, ">", >, Uint32, Bool)

UNARY_OP(UNARU_MINUS, TID_UINT32, TID_INT32, "-", -, Uint32, Int32)

CONVERTOR(TID_UINT32, TID_UINT8, Uint32, Uint8, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_UINT32, TID_UINT16, Uint32, Uint16, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_UINT32, TID_UINT64, Uint32, Uint64, 2)
CONVERTOR(TID_UINT32, TID_INT8,  Uint32, Int8, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_UINT32, TID_INT16, Uint32, Int16, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_UINT32, TID_INT32, Uint32, Int32, 1)
CONVERTOR(TID_UINT32, TID_INT64, Uint32, Int64, 2)
CONVERTOR(TID_UINT32, TID_FLOAT, Uint32, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_UINT32, TID_DOUBLE, Uint32, Double, TRANSFORM_CONVERSION_COST)
// CONVERTOR(TID_UINT32, TID_BOOL, Uint32, Bool, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_UINT32, TID_BOOL, Uint32, Bool, TRANSFORM_CONVERSION_COST)

// TID_UINT64
BINARY_OP(PLUS, TID_UINT64, TID_UINT64, "+", +, Uint64, Uint64)
BINARY_OP(MINUS, TID_UINT64, TID_INT64, "-", -, Uint64, Int64)
BINARY_OP(MULT, TID_UINT64, TID_UINT64, "*", *, Uint64, Uint64)
BINARY_BOP(EQ, TID_UINT64, TID_BOOL, "=", ==, Uint64, Bool)
DIVISION_OP(DIV, TID_UINT64, TID_UINT64, "/", /, Uint64, Uint64)
DIVISION_OP(MOD, TID_UINT64, TID_UINT64, "%", %, Uint64, Uint64)
BINARY_BOP(LS, TID_UINT64, TID_BOOL, "<", <, Uint64, Bool)
BINARY_BOP(LSEQ, TID_UINT64, TID_BOOL, "<=", <=, Uint64, Bool)
BINARY_BOP(NEQ, TID_UINT64, TID_BOOL, "<>", !=, Uint64, Bool)
BINARY_BOP(GTEQ, TID_UINT64, TID_BOOL, ">=", >=, Uint64, Bool)
BINARY_BOP(GT, TID_UINT64, TID_BOOL, ">", >, Uint64, Bool)

UNARY_OP(UNARU_MINUS, TID_UINT64, TID_INT64, "-", -, Uint64, Int64)

CONVERTOR(TID_UINT64, TID_UINT8, Int64, Uint8, TRUNCATE_CONVERSION_COST*3)
CONVERTOR(TID_UINT64, TID_UINT16, Int64, Uint16, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_UINT64, TID_UINT32, Int64, Uint32, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_UINT64, TID_INT8, Int64, Int8, TRUNCATE_CONVERSION_COST*3)
CONVERTOR(TID_UINT64, TID_INT16, Uint64, Int16, TRUNCATE_CONVERSION_COST*2)
CONVERTOR(TID_UINT64, TID_INT32, Uint64, Int32, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_UINT64, TID_INT64, Uint64, Int64, 1)
CONVERTOR(TID_UINT64, TID_FLOAT, Uint64, Float, TRANSFORM_CONVERSION_COST*2)
CONVERTOR(TID_UINT64, TID_DOUBLE, Uint64, Double, TRANSFORM_CONVERSION_COST)
// CONVERTOR(TID_UINT64, TID_BOOL, Uint64, Bool, TRANSFORM_CONVERSION_COST)
CONVERTOR_BOOL(TID_UINT64, TID_BOOL, Uint64, Bool, TRANSFORM_CONVERSION_COST)

/* TID_FLOAT */
BINARY_OP(PLUS, TID_FLOAT, TID_FLOAT, "+", +, Float, Float)
BINARY_OP(MINUS, TID_FLOAT, TID_FLOAT, "-", -, Float, Float)
BINARY_OP(MULT, TID_FLOAT, TID_FLOAT, "*", *, Float, Float)
BINARY_BOP(EQ, TID_FLOAT, TID_BOOL, "=", ==, Float, Bool)
BINARY_OP(DIV, TID_FLOAT, TID_FLOAT, "/", /, Float, Float)
BINARY_BOP(LS, TID_FLOAT, TID_BOOL, "<", <, Float, Bool)
BINARY_BOP(LSEQ, TID_FLOAT, TID_BOOL, "<=", <=, Float, Bool)
BINARY_BOP(NEQ, TID_FLOAT, TID_BOOL, "<>", !=, Float, Bool)
BINARY_BOP(GTEQ, TID_FLOAT, TID_BOOL, ">=", >=, Float, Bool)
BINARY_BOP(GT, TID_FLOAT, TID_BOOL, ">", >, Float, Bool)

UNARY_OP(UNARU_MINUS, TID_FLOAT, TID_FLOAT, "-", -, Float, Float)

CONVERTOR(TID_FLOAT, TID_DOUBLE, Float, Double, 1)
CONVERTOR(TID_FLOAT, TID_CHAR, Float, Char, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_INT8, Float, Int8, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_INT16, Float, Int16, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_INT32, Float, Int32, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_INT64, Float, Int64, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_UINT8, Float, Uint8, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_UINT16, Float, Uint16, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_UINT32, Float, Uint32, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_FLOAT, TID_UINT64, Float, Uint64, EXPLICIT_CONVERSION_COST)

/* TID_DOUBLE */
BINARY_OP(PLUS, TID_DOUBLE, TID_DOUBLE, "+", +, Double, Double)
BINARY_OP(MINUS, TID_DOUBLE, TID_DOUBLE, "-", -, Double, Double)
BINARY_OP(MULT, TID_DOUBLE, TID_DOUBLE, "*", *, Double, Double)
BINARY_BOP(EQ, TID_DOUBLE, TID_BOOL, "=", ==, Double, Bool)
BINARY_OP(DIV, TID_DOUBLE, TID_DOUBLE, "/", /, Double, Double)
BINARY_BOP(LS, TID_DOUBLE, TID_BOOL, "<", <, Double, Bool)
BINARY_BOP(LSEQ, TID_DOUBLE, TID_BOOL, "<=", <=, Double, Bool)
BINARY_BOP(NEQ, TID_DOUBLE, TID_BOOL, "<>", !=, Double, Bool)
BINARY_BOP(GTEQ, TID_DOUBLE, TID_BOOL, ">=", >=, Double, Bool)
BINARY_BOP(GT, TID_DOUBLE, TID_BOOL, ">", >, Double, Bool)

UNARY_OP(UNARU_MINUS, TID_DOUBLE, TID_DOUBLE, "-", -, Double, Double)

CONVERTOR(TID_DOUBLE, TID_FLOAT, Double, Float, TRUNCATE_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_CHAR, Double, Char, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_INT8, Double, Int8, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_INT16, Double, Int16, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_INT32, Double, Int32, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_INT64, Double, Int64, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_UINT8, Double, Uint8, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_UINT16, Double, Uint16, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_UINT32, Double, Uint32, EXPLICIT_CONVERSION_COST)
CONVERTOR(TID_DOUBLE, TID_UINT64, Double, Uint64, EXPLICIT_CONVERSION_COST)

/* TID_BOOL */
LOGICAL_OP(EQ, TID_BOOL, TID_BOOL, "=", ==, ==, Bool, Bool)
BINARY_BBOP(LS, TID_BOOL, TID_BOOL, "<", <, Bool, Bool)
BINARY_BBOP(LSEQ, TID_BOOL, TID_BOOL, "<=", <=, Bool, Bool)
LOGICAL_OP(NEQ, TID_BOOL, TID_BOOL, "<>", !=, !=, Bool, Bool)
BINARY_BBOP(GTEQ, TID_BOOL, TID_BOOL, ">=", >=, Bool, Bool)
BINARY_BBOP(GT, TID_BOOL, TID_BOOL, ">", >, Bool, Bool)
LOGICAL_AND(AND, TID_BOOL, TID_BOOL, "and")
LOGICAL_OR(OR, TID_BOOL, TID_BOOL, "or")

UNARY_NOT(NOT, TID_BOOL, TID_BOOL, "not", !, Bool, Bool)

/* Cconvertors to/from string */
CONVERTOR_TO_STR(TID_INT8, Int8)
CONVERTOR_TO_STR(TID_INT16, Int16)
CONVERTOR_TO_STR(TID_INT32, Int32)
CONVERTOR_TO_STR(TID_INT64, Int64)
CONVERTOR_TO_STR(TID_UINT8, Uint8)
CONVERTOR_TO_STR(TID_UINT16, Uint16)
CONVERTOR_TO_STR(TID_UINT32, Uint32)
CONVERTOR_TO_STR(TID_UINT64, Uint64)
CONVERTOR_TO_STR(TID_FLOAT, Float)
CONVERTOR_TO_STR(TID_DOUBLE, Double)

CONVERTOR_STR_TO_OCTET(TID_INT8, Int8)
CONVERTOR_FROM_STR(TID_INT16, Int16)
CONVERTOR_FROM_STR(TID_INT32, Int32)
CONVERTOR_FROM_STR(TID_INT64, Int64)
CONVERTOR_STR_TO_OCTET(TID_UINT8, Uint8)
CONVERTOR_FROM_STR(TID_UINT16, Uint16)
CONVERTOR_FROM_STR(TID_UINT32, Uint32)
CONVERTOR_FROM_STR(TID_UINT64, Uint64)
CONVERTOR_FROM_STR(TID_FLOAT, Float)
CONVERTOR_FROM_STR(TID_DOUBLE, Double)


/* FUNCTIONS */
FUNCTION_A1(SIN, TID_DOUBLE, TID_DOUBLE, "sin", sin, Double, Double)
FUNCTION_A1(SIN, TID_FLOAT, TID_FLOAT, "sin", sin, Float, Float)
FUNCTION_A1(COS, TID_DOUBLE, TID_DOUBLE, "cos", cos, Double, Double)
FUNCTION_A1(COS, TID_FLOAT, TID_FLOAT, "cos", cos, Float, Float)
FUNCTION_A1(TAN, TID_DOUBLE, TID_DOUBLE, "tan", tan, Double, Double)
FUNCTION_A1(TAN, TID_FLOAT, TID_FLOAT, "tan", tan, Float, Float)
FUNCTION_A1(ASIN, TID_DOUBLE, TID_DOUBLE, "asin", asin, Double, Double)
FUNCTION_A1(ASIN, TID_FLOAT, TID_FLOAT, "asin", asin, Float, Float)
FUNCTION_A1(ACOS, TID_DOUBLE, TID_DOUBLE, "acos", acos, Double, Double)
FUNCTION_A1(ACOS, TID_FLOAT, TID_FLOAT, "acos", acos, Float, Float)
FUNCTION_A1(ATAN, TID_DOUBLE, TID_DOUBLE, "atan", atan, Double, Double)
FUNCTION_A1(ATAN, TID_FLOAT, TID_FLOAT, "atan", atan, Float, Float)
FUNCTION_A1(SQRT, TID_DOUBLE, TID_DOUBLE, "sqrt", sqrt, Double, Double)
FUNCTION_A1(SQRT, TID_FLOAT, TID_FLOAT, "sqrt", sqrt, Float, Float)
FUNCTION_A1(LOG, TID_DOUBLE, TID_DOUBLE, "log", log, Double, Double)
FUNCTION_A1(LOG, TID_FLOAT, TID_FLOAT, "log", log, Float, Float)
FUNCTION_A1(LOG10, TID_DOUBLE, TID_DOUBLE, "log10", log10, Double, Double)
FUNCTION_A1(LOG10, TID_FLOAT, TID_FLOAT, "log10", log10, Float, Float)
FUNCTION_A1(EXP, TID_DOUBLE, TID_DOUBLE, "exp", exp, Double, Double)
FUNCTION_A1(EXP, TID_FLOAT, TID_FLOAT, "exp", exp, Float, Float)
FUNCTION_A1(CEIL, TID_DOUBLE, TID_INT64, "ceil", ceil, Double, Int64)
FUNCTION_A1(FLOOR, TID_DOUBLE, TID_INT64, "floor", floor, Double, Int64)
FUNCTION_A1(ABS, TID_DOUBLE, TID_DOUBLE, "abs", std::abs, Double, Double)
FUNCTION_A1(ABS, TID_INT32, TID_INT32, "abs", abs, Int32, Int32)

FUNCTION_A2(POW, TID_DOUBLE, TID_DOUBLE, TID_DOUBLE, "pow", pow, Double, Double, Double)
FUNCTION_A2(MOD, TID_DOUBLE, TID_DOUBLE, TID_DOUBLE, "%", fmod, Double, Double, Double)

